{
  "contractName": "uniswap_exchange",
  "abi": [
    {
      "name": "TokenPurchase",
      "inputs": [
        {
          "type": "address",
          "name": "buyer",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_sold",
          "indexed": true,
          "unit": "wei"
        },
        {
          "type": "uint256",
          "name": "tokens_bought",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "EthPurchase",
      "inputs": [
        {
          "type": "address",
          "name": "buyer",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "tokens_sold",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_bought",
          "indexed": true,
          "unit": "wei"
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "AddLiquidity",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_amount",
          "indexed": true,
          "unit": "wei"
        },
        {
          "type": "uint256",
          "name": "token_amount",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "RemoveLiquidity",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_amount",
          "indexed": true,
          "unit": "wei"
        },
        {
          "type": "uint256",
          "name": "token_amount",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Transfer",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_to",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Approval",
      "inputs": [
        {
          "type": "address",
          "name": "_owner",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_spender",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "setup",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 175895
    },
    {
      "name": "addLiquidity",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_liquidity"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 82665
    },
    {
      "name": "removeLiquidity",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 116854
    },
    {
      "constant": false,
      "payable": true,
      "type": "fallback"
    },
    {
      "name": "ethToTokenSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 12924
    },
    {
      "name": "ethToTokenTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 13114
    },
    {
      "name": "ethToTokenSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 50661
    },
    {
      "name": "ethToTokenTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 50851
    },
    {
      "name": "tokenToEthSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 47653
    },
    {
      "name": "tokenToEthTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 47843
    },
    {
      "name": "tokenToEthSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "eth_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 50325
    },
    {
      "name": "tokenToEthTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "eth_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 50515
    },
    {
      "name": "tokenToTokenSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 51096
    },
    {
      "name": "tokenToTokenTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 51169
    },
    {
      "name": "tokenToTokenSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 54945
    },
    {
      "name": "tokenToTokenTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 55018
    },
    {
      "name": "tokenToExchangeSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 49431
    },
    {
      "name": "tokenToExchangeTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 49600
    },
    {
      "name": "tokenToExchangeSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 53250
    },
    {
      "name": "tokenToExchangeTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 53419
    },
    {
      "name": "getEthToTokenInputPrice",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "eth_sold"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 5618
    },
    {
      "name": "getEthToTokenOutputPrice",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 6948
    },
    {
      "name": "getTokenToEthInputPrice",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 5713
    },
    {
      "name": "getTokenToEthOutputPrice",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "eth_bought"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 6973
    },
    {
      "name": "tokenAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1481
    },
    {
      "name": "factoryAddress",
      "outputs": [
        {
          "type": "address",
          "unit": "Factory",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1511
    },
    {
      "name": "balanceOf",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1695
    },
    {
      "name": "transfer",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 75078
    },
    {
      "name": "transferFrom",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 110945
    },
    {
      "name": "approve",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_spender"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 38813
    },
    {
      "name": "allowance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        },
        {
          "type": "address",
          "name": "_spender"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1969
    },
    {
      "name": "name",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1691
    },
    {
      "name": "symbol",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1721
    },
    {
      "name": "decimals",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1751
    },
    {
      "name": "totalSupply",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1781
    }
  ],
  "bytecode": "0x612c8756600436101561000d57612c3b565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526366d38203600051141561013f5734156100ba57600080fd5b60043560205181106100cb57600080fd5b5060006004351415600654156007541516166100e657600080fd5b336007556004356006557f556e6973776170205631000000000000000000000000000000000000000000006000557f554e492d563100000000000000000000000000000000000000000000000000006001556012600255005b63422f104360005114156105ad57600034116000602435111642604435111661016757600080fd5b60035461014052600061014051111561043b5760006004351161018957600080fd5b343031101561019757600080fd5b34303103610360526006543b6101ac57600080fd5b60065430186101ba57600080fd5b602061042060246370a082316103a052306103c0526103bc6006545afa6101e057600080fd5b6000506104205161038052610360516101f857600080fd5b6103605134151561020a576000610227565b6103805134610380513402041461022057600080fd5b6103805134025b0460016103605161023757600080fd5b61036051341515610249576000610266565b6103805134610380513402041461025f57600080fd5b6103805134025b0401101561027357600080fd5b60016103605161028257600080fd5b610360513415156102945760006102b1565b610380513461038051340204146102aa57600080fd5b6103805134025b040161044052610360516102c457600080fd5b610360513415156102d65760006102f3565b610140513461014051340204146102ec57600080fd5b6101405134025b04610460526004356104605110156104405160243510151661031457600080fd5b60043360e05260c052604060c020805461046051825401101561033657600080fd5b6104605181540181555061014051610460516101405101101561035857600080fd5b6104605161014051016003556006543b61037157600080fd5b600654301861037f57600080fd5b602061056060646323b872dd6104a052336104c052306104e05261044051610500526104bc60006006545af16103b457600080fd5b6000506105605161048052610480516103cc57600080fd5b6104405134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461046051610580523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610580a36104605160005260206000f36105ab565b633b9aca003410156000600654141560006007541415161661045c57600080fd5b306007543b61046a57600080fd5b600754301861047857600080fd5b60206101e060246306f2bf62610160526006546101805261017c6007545afa6104a057600080fd5b6000506101e051146104b157600080fd5b60243561020052303161022052610220516003556102205160043360e05260c052604060c020556006543b6104e557600080fd5b60065430186104f357600080fd5b602061032060646323b872dd610260523361028052306102a052610200516102c05261027c60006006545af161052857600080fd5b60005061032051610240526102405161054057600080fd5b6102005134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461022051610340523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610340a36102205160005260206000f35b005b63f88bf15a60005114156108385734156105c657600080fd5b60006044351160006024351116426064351160006004351116166105e957600080fd5b600354610140526000610140511161060057600080fd5b6006543b61060d57600080fd5b600654301861061b57600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa61064157600080fd5b60005061020051610160526101405161065957600080fd5b61014051600435151561066d57600061068a565b3031600435303160043502041461068357600080fd5b3031600435025b04610220526101405161069c57600080fd5b6101405160043515156106b05760006106d3565b61016051600435610160516004350204146106ca57600080fd5b61016051600435025b0461024052604435610240511015602435610220511015166106f457600080fd5b60043360e05260c052604060c0206004358154101561071257600080fd5b60043581540381555060043561014051101561072d57600080fd5b6004356101405103600355600060006000600061022051336000f161075157600080fd5b6006543b61075e57600080fd5b600654301861076c57600080fd5b6020610320604463a9059cbb61028052336102a052610240516102c05261029c60006006545af161079c57600080fd5b6000506103205161026052610260516107b457600080fd5b6102405161022051337f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e860006000a4600435610340526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610340a36040610360526103806102205181526102405181602001525061036051610380f350005b6000156109b4575b6101a05261014052610160526101805260006101805111600061016051111661086857600080fd5b61014051151561087957600061089c565b6103e5610140516103e56101405102041461089357600080fd5b6103e561014051025b6101c0526101c05115156108b15760006108d7565b610180516101c051610180516101c0510204146108cd57600080fd5b610180516101c051025b6101e0526101605115156108ec57600061090f565b6103e8610160516103e86101605102041461090657600080fd5b6103e861016051025b6101c051610160511515610924576000610947565b6103e8610160516103e86101605102041461093e57600080fd5b6103e861016051025b01101561095357600080fd5b6101c05161016051151561096857600061098b565b6103e8610160516103e86101605102041461098257600080fd5b6103e861016051025b01610200526102005161099d57600080fd5b610200516101e051046000526000516101a0515650005b600015610be1575b6101a0526101405261016052610180526000610180511160006101605111166109e457600080fd5b6101605115156109f5576000610a1b565b61014051610160516101405161016051020414610a1157600080fd5b6101405161016051025b1515610a28576000610ae4565b6103e8610160511515610a3c576000610a62565b61014051610160516101405161016051020414610a5857600080fd5b6101405161016051025b6103e8610160511515610a76576000610a9c565b61014051610160516101405161016051020414610a9257600080fd5b6101405161016051025b020414610aa857600080fd5b6103e8610160511515610abc576000610ae2565b61014051610160516101405161016051020414610ad857600080fd5b6101405161016051025b025b6101c05261014051610180511015610afb57600080fd5b6101405161018051031515610b11576000610b7c565b6103e561014051610180511015610b2757600080fd5b6101405161018051036103e561014051610180511015610b4657600080fd5b610140516101805103020414610b5b57600080fd5b6103e561014051610180511015610b7157600080fd5b610140516101805103025b6101e0526101e051610b8d57600080fd5b6101e0516101c0510460016101e051610ba557600080fd5b6101e0516101c05104011015610bba57600080fd5b60016101e051610bc957600080fd5b6101e0516101c05104016000526000516101a0515650005b600015610dd5575b6101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610c2157600080fd5b6006543b610c2e57600080fd5b6006543018610c3c57600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610c6257600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e0511015610c9757610c75565b6389f2a8716103005261014051610320526101405130311015610cb957600080fd5b6101405130310361034052610200516103605261036051610340516103205160065801610840565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610d1057610ced565b6103c0516102c052610160516102c0511015610d2b57600080fd5b6006543b610d3857600080fd5b6006543018610d4657600080fd5b60206104a0604463a9059cbb610400526101c051610420526102c0516104405261041c60006006545af1610d7957600080fd5b6000506104a0516103e0526103e051610d9157600080fd5b6102c051610140516101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a46102c0516000526000516101e0515650005b63f39b5b9b6000511415610e3957638c717a33610140523461016052600435610180526024356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610be9565b610240526102405160005260206000f350005b63ad65d76d6000511415610ec8576044356020518110610e5857600080fd5b506000604435141530604435141516610e7057600080fd5b638c717a33610140523461016052600435610180526024356101a052336101c0526044356101e0526101e0516101c0516101a051610180516101605160065801610be9565b610240526102405160005260206000f350005b600015611103575b6101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610f0857600080fd5b6006543b610f1557600080fd5b6006543018610f2357600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610f4957600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e0511015610f7e57610f5c565b63fd11c2236103005261014051610320526101605130311015610fa057600080fd5b61016051303103610340526102005161036052610360516103405161032051600658016109bc565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610ff757610fd4565b6103c0516102c05260016102c05102610400526104005161016051101561101d57600080fd5b6104005161016051036103e05260006103e05111156110535760006000600060006103e0516101a0516000f161105257600080fd5b5b6006543b61106057600080fd5b600654301861106e57600080fd5b60206104e0604463a9059cbb610440526101c05161046052610140516104805261045c60006006545af16110a157600080fd5b6000506104e05161042052610420516110b957600080fd5b6101405160016102c051026101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a460016102c051026000526000516101e0515650005b636b1d4db7600051141561116757632dff394e610140526004356101605234610180526024356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610ed0565b610240526102405160005260206000f350005b630b57363860005114156111f657604435602051811061118657600080fd5b50600060443514153060443514151661119e57600080fd5b632dff394e610140526004356101605234610180526024356101a052336101c0526044356101e0526101e0516101c0516101a051610180516101605160065801610ed0565b610240526102405160005260206000f350005b600015611400575b6101e0526101405261016052610180526101a0526101c052600061016051116000610140511116426101805110151661123657600080fd5b6006543b61124357600080fd5b600654301861125157600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61127757600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e05110156112ac5761128a565b6389f2a871610300526101405161032052610200516103405230316103605261036051610340516103205160065801610840565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e05110151561130f576112ec565b6103c0516102c05260016102c051026103e052610160516103e051101561133557600080fd5b60006000600060006103e0516101c0516000f161135157600080fd5b6006543b61135e57600080fd5b600654301861136c57600080fd5b60206104e060646323b872dd610420526101a051610440523061046052610140516104805261043c60006006545af16113a457600080fd5b6000506104e05161040052610400516113bc57600080fd5b6103e051610140516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103e0516000526000516101e0515650005b6395e3c50b600051141561147157341561141957600080fd5b63fa1bb7be6101405260043561016052602435610180526044356101a052336101c052336101e0526101e0516101c0516101a0516101805161016051600658016111fe565b610240526102405160005260206000f350005b637237e031600051141561150d57341561148a57600080fd5b606435602051811061149b57600080fd5b5060006064351415306064351415166114b357600080fd5b63fa1bb7be6101405260043561016052602435610180526044356101a052336101c0526064356101e0526101e0516101c0516101a0516101805161016051600658016111fe565b610240526102405160005260206000f350005b600015611704575b6101e0526101405261016052610180526101a0526101c05260006101405111426101805110151661154557600080fd5b6006543b61155257600080fd5b600654301861156057600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61158657600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e05110156115bb57611599565b63fd11c2236103005261014051610320526102005161034052303161036052610360516103405161032051600658016109bc565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e05110151561161e576115fb565b6103c0516102c0526102c05161016051101561163957600080fd5b6000600060006000610140516101c0516000f161165557600080fd5b6006543b61166257600080fd5b600654301861167057600080fd5b60206104c060646323b872dd610400526101a0516104205230610440526102c0516104605261041c60006006545af16116a857600080fd5b6000506104c0516103e0526103e0516116c057600080fd5b610140516102c0516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46102c0516000526000516101e0515650005b63013efd8b600051141561177557341561171d57600080fd5b63984fe8f66101405260043561016052602435610180526044356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801611515565b610240526102405160005260206000f350005b63d4e4841d600051141561181157341561178e57600080fd5b606435602051811061179f57600080fd5b5060006064351415306064351415166117b757600080fd5b63984fe8f66101405260043561016052602435610180526044356101a052336101c0526064356101e0526101e0516101c0516101a051610180516101605160065801611515565b610240526102405160005260206000f350005b600015611a8e575b610220526101405261016052610180526101a0526101c0526101e0526102005260006101805111600061016051111660006101405111426101a0511015161661186157600080fd5b6000610200511415306102005114151661187a57600080fd5b6006543b61188757600080fd5b600654301861189557600080fd5b60206102e060246370a0823161026052306102805261027c6006545afa6118bb57600080fd5b6000506102e05161024052610140610320525b610320515160206103205101610320526103206103205110156118f0576118ce565b6389f2a871610340526101405161036052610240516103805230316103a0526103a051610380516103605160065801610840565b61040052610300610320525b610320515260206103205103610320526101406103205110151561195357611930565b610400516103005260016103005102610420526101805161042051101561197957600080fd5b6006543b61198657600080fd5b600654301861199457600080fd5b602061052060646323b872dd610460526101c05161048052306104a052610140516104c05261047c60006006545af16119cc57600080fd5b6000506105205161044052610440516119e457600080fd5b610200513b6119f257600080fd5b610200513018611a0157600080fd5b6020610620606463ad65d76d6105605261016051610580526101a0516105a0526101e0516105c05261057c61042051610200515af1611a3f57600080fd5b600050610620516105405261042051610140516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a461054051600052600051610220515650005b63ddf7e1a76000511415611ba6573415611aa757600080fd5b6084356020518110611ab857600080fd5b506007543b611ac657600080fd5b6007543018611ad457600080fd5b60206101e060246306f2bf62610160526084356101805261017c6007545afa611afc57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163204ea33b610220526004356102405260243561026052604435610280526064356102a052336102c052336102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611819565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63f552d91b6000511415611cd2573415611bbf57600080fd5b6084356020518110611bd057600080fd5b5060a4356020518110611be257600080fd5b506007543b611bf057600080fd5b6007543018611bfe57600080fd5b60206101e060246306f2bf626101605260a4356101805261017c6007545afa611c2657600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163204ea33b610220526004356102405260243561026052604435610280526064356102a052336102c0526084356102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611819565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b600015611f99575b610220526101405261016052610180526101a0526101c0526101e05261020052600061018051116000610140511116426101a051101516611d1a57600080fd5b60006102005114153061020051141516611d3357600080fd5b610200513b611d4157600080fd5b610200513018611d5057600080fd5b60206102e060246359e9486261026052610140516102805261027c610200515afa611d7a57600080fd5b6000506102e051610240526006543b611d9257600080fd5b6006543018611da057600080fd5b60206103a060246370a0823161032052306103405261033c6006545afa611dc657600080fd5b6000506103a051610300526101406103e0525b6103e0515160206103e051016103e0526103e06103e0511015611dfb57611dd9565b63fd11c2236104005261024051610420526103005161044052303161046052610460516104405161042051600658016109bc565b6104c0526103c06103e0525b6103e0515260206103e051036103e0526101406103e051101515611e5e57611e3b565b6104c0516103c052610240516101805110156103c05161016051101516611e8457600080fd5b6006543b611e9157600080fd5b6006543018611e9f57600080fd5b60206105c060646323b872dd610500526101c0516105205230610540526103c0516105605261051c60006006545af1611ed757600080fd5b6000506105c0516104e0526104e051611eef57600080fd5b610200513b611efd57600080fd5b610200513018611f0c57600080fd5b60206106c06064630b5736386106005261014051610620526101a051610640526101e0516106605261061c61024051610200515af1611f4a57600080fd5b6000506106c0516105e052610240516103c0516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103c051600052600051610220515650005b63b040d54560005114156120b1573415611fb257600080fd5b6084356020518110611fc357600080fd5b506007543b611fd157600080fd5b6007543018611fdf57600080fd5b60206101e060246306f2bf62610160526084356101805261017c6007545afa61200757600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051631a7b28f2610220526004356102405260243561026052604435610280526064356102a052336102c052336102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611cda565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63f3c0efe960005114156121dd5734156120ca57600080fd5b60843560205181106120db57600080fd5b5060a43560205181106120ed57600080fd5b506007543b6120fb57600080fd5b600754301861210957600080fd5b60206101e060246306f2bf626101605260a4356101805261017c6007545afa61213157600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051631a7b28f2610220526004356102405260243561026052604435610280526064356102a052336102c0526084356102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611cda565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63b1cb43bf60005114156122765734156121f657600080fd5b608435602051811061220757600080fd5b5063204ea33b6101405260043561016052602435610180526044356101a0526064356101c052336101e05233610200526084356102205261022051610200516101e0516101c0516101a051610180516101605160065801611819565b610280526102805160005260206000f350005b63ec384a3e600051141561233157341561228f57600080fd5b60843560205181106122a057600080fd5b5060a43560205181106122b257600080fd5b5030608435186122c157600080fd5b63204ea33b6101405260043561016052602435610180526044356101a0526064356101c052336101e0526084356102005260a4356102205261022051610200516101e0516101c0516101a051610180516101605160065801611819565b610280526102805160005260206000f350005b63ea650c7d60005114156123ca57341561234a57600080fd5b608435602051811061235b57600080fd5b50631a7b28f26101405260043561016052602435610180526044356101a0526064356101c052336101e05233610200526084356102205261022051610200516101e0516101c0516101a051610180516101605160065801611cda565b610280526102805160005260206000f350005b63981a132760005114156124855734156123e357600080fd5b60843560205181106123f457600080fd5b5060a435602051811061240657600080fd5b50306084351861241557600080fd5b631a7b28f26101405260043561016052602435610180526044356101a0526064356101c052336101e0526084356102005260a4356102205261022051610200516101e0516101c0516101a051610180516101605160065801611cda565b610280526102805160005260206000f350005b63cd7724c3600051141561256f57341561249e57600080fd5b6000600435116124ad57600080fd5b6006543b6124ba57600080fd5b60065430186124c857600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6124ee57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e0516389f2a8716102205260043561024052303161026052610140516102805261028051610260516102405160065801610840565b6102e0526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f350005b6359e94862600051141561266c57341561258857600080fd5b60006004351161259757600080fd5b6006543b6125a457600080fd5b60065430186125b257600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6125d857600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e0516102005163fd11c2236102405260043561026052303161028052610140516102a0526102a0516102805161026051600658016109bc565b61030052610200526101e0526101c0526101a05261018052610160526101405261030051610200526001610200510260005260206000f350005b6395b68fe7600051141561276957341561268557600080fd5b60006004351161269457600080fd5b6006543b6126a157600080fd5b60065430186126af57600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6126d557600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051610200516389f2a8716102405260043561026052610140516102805230316102a0526102a051610280516102605160065801610840565b61030052610200526101e0526101c0526101a05261018052610160526101405261030051610200526001610200510260005260206000f350005b632640f62c600051141561285357341561278257600080fd5b60006004351161279157600080fd5b6006543b61279e57600080fd5b60065430186127ac57600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6127d257600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163fd11c22361022052600435610240526101405161026052303161028052610280516102605161024051600658016109bc565b6102e0526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f350005b639d76ea58600051141561287a57341561286c57600080fd5b60065460005260206000f350005b63966dae0e60005114156128a157341561289357600080fd5b60075460005260206000f350005b6370a0823160005114156128e85734156128ba57600080fd5b60043560205181106128cb57600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b63a9059cbb60005114156129a557341561290157600080fd5b600435602051811061291257600080fd5b5060043360e05260c052604060c0206024358154101561293157600080fd5b602435815403815550600460043560e05260c052604060c0208054602435825401101561295d57600080fd5b60243581540181555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd6000511415612aad5734156129be57600080fd5b60043560205181106129cf57600080fd5b5060243560205181106129e157600080fd5b50600460043560e05260c052604060c02060443581541015612a0257600080fd5b604435815403815550600460243560e05260c052604060c02080546044358254011015612a2e57600080fd5b604435815401815550600560043560e05260c052604060c0203360e05260c052604060c02060443581541015612a6357600080fd5b604435815403815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b36000511415612b37573415612ac657600080fd5b6004356020518110612ad757600080fd5b5060243560053360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b63dd62ed3e6000511415612b9e573415612b5057600080fd5b6004356020518110612b6157600080fd5b506024356020518110612b7357600080fd5b50600560043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b6306fdde036000511415612bc5573415612bb757600080fd5b60005460005260206000f350005b6395d89b416000511415612bec573415612bde57600080fd5b60015460005260206000f350005b63313ce5676000511415612c13573415612c0557600080fd5b60025460005260206000f350005b6318160ddd6000511415612c3a573415612c2c57600080fd5b60035460005260206000f350005b5b638c717a33610140523461016052600161018052426101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610be9565b610240526102405b610004612c8703610004600039610004612c87036000f3",
  "deployedBytecode": "0x600436101561000d57612c3b565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526366d38203600051141561013f5734156100ba57600080fd5b60043560205181106100cb57600080fd5b5060006004351415600654156007541516166100e657600080fd5b336007556004356006557f556e6973776170205631000000000000000000000000000000000000000000006000557f554e492d563100000000000000000000000000000000000000000000000000006001556012600255005b63422f104360005114156105ad57600034116000602435111642604435111661016757600080fd5b60035461014052600061014051111561043b5760006004351161018957600080fd5b343031101561019757600080fd5b34303103610360526006543b6101ac57600080fd5b60065430186101ba57600080fd5b602061042060246370a082316103a052306103c0526103bc6006545afa6101e057600080fd5b6000506104205161038052610360516101f857600080fd5b6103605134151561020a576000610227565b6103805134610380513402041461022057600080fd5b6103805134025b0460016103605161023757600080fd5b61036051341515610249576000610266565b6103805134610380513402041461025f57600080fd5b6103805134025b0401101561027357600080fd5b60016103605161028257600080fd5b610360513415156102945760006102b1565b610380513461038051340204146102aa57600080fd5b6103805134025b040161044052610360516102c457600080fd5b610360513415156102d65760006102f3565b610140513461014051340204146102ec57600080fd5b6101405134025b04610460526004356104605110156104405160243510151661031457600080fd5b60043360e05260c052604060c020805461046051825401101561033657600080fd5b6104605181540181555061014051610460516101405101101561035857600080fd5b6104605161014051016003556006543b61037157600080fd5b600654301861037f57600080fd5b602061056060646323b872dd6104a052336104c052306104e05261044051610500526104bc60006006545af16103b457600080fd5b6000506105605161048052610480516103cc57600080fd5b6104405134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461046051610580523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610580a36104605160005260206000f36105ab565b633b9aca003410156000600654141560006007541415161661045c57600080fd5b306007543b61046a57600080fd5b600754301861047857600080fd5b60206101e060246306f2bf62610160526006546101805261017c6007545afa6104a057600080fd5b6000506101e051146104b157600080fd5b60243561020052303161022052610220516003556102205160043360e05260c052604060c020556006543b6104e557600080fd5b60065430186104f357600080fd5b602061032060646323b872dd610260523361028052306102a052610200516102c05261027c60006006545af161052857600080fd5b60005061032051610240526102405161054057600080fd5b6102005134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461022051610340523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610340a36102205160005260206000f35b005b63f88bf15a60005114156108385734156105c657600080fd5b60006044351160006024351116426064351160006004351116166105e957600080fd5b600354610140526000610140511161060057600080fd5b6006543b61060d57600080fd5b600654301861061b57600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa61064157600080fd5b60005061020051610160526101405161065957600080fd5b61014051600435151561066d57600061068a565b3031600435303160043502041461068357600080fd5b3031600435025b04610220526101405161069c57600080fd5b6101405160043515156106b05760006106d3565b61016051600435610160516004350204146106ca57600080fd5b61016051600435025b0461024052604435610240511015602435610220511015166106f457600080fd5b60043360e05260c052604060c0206004358154101561071257600080fd5b60043581540381555060043561014051101561072d57600080fd5b6004356101405103600355600060006000600061022051336000f161075157600080fd5b6006543b61075e57600080fd5b600654301861076c57600080fd5b6020610320604463a9059cbb61028052336102a052610240516102c05261029c60006006545af161079c57600080fd5b6000506103205161026052610260516107b457600080fd5b6102405161022051337f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e860006000a4600435610340526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610340a36040610360526103806102205181526102405181602001525061036051610380f350005b6000156109b4575b6101a05261014052610160526101805260006101805111600061016051111661086857600080fd5b61014051151561087957600061089c565b6103e5610140516103e56101405102041461089357600080fd5b6103e561014051025b6101c0526101c05115156108b15760006108d7565b610180516101c051610180516101c0510204146108cd57600080fd5b610180516101c051025b6101e0526101605115156108ec57600061090f565b6103e8610160516103e86101605102041461090657600080fd5b6103e861016051025b6101c051610160511515610924576000610947565b6103e8610160516103e86101605102041461093e57600080fd5b6103e861016051025b01101561095357600080fd5b6101c05161016051151561096857600061098b565b6103e8610160516103e86101605102041461098257600080fd5b6103e861016051025b01610200526102005161099d57600080fd5b610200516101e051046000526000516101a0515650005b600015610be1575b6101a0526101405261016052610180526000610180511160006101605111166109e457600080fd5b6101605115156109f5576000610a1b565b61014051610160516101405161016051020414610a1157600080fd5b6101405161016051025b1515610a28576000610ae4565b6103e8610160511515610a3c576000610a62565b61014051610160516101405161016051020414610a5857600080fd5b6101405161016051025b6103e8610160511515610a76576000610a9c565b61014051610160516101405161016051020414610a9257600080fd5b6101405161016051025b020414610aa857600080fd5b6103e8610160511515610abc576000610ae2565b61014051610160516101405161016051020414610ad857600080fd5b6101405161016051025b025b6101c05261014051610180511015610afb57600080fd5b6101405161018051031515610b11576000610b7c565b6103e561014051610180511015610b2757600080fd5b6101405161018051036103e561014051610180511015610b4657600080fd5b610140516101805103020414610b5b57600080fd5b6103e561014051610180511015610b7157600080fd5b610140516101805103025b6101e0526101e051610b8d57600080fd5b6101e0516101c0510460016101e051610ba557600080fd5b6101e0516101c05104011015610bba57600080fd5b60016101e051610bc957600080fd5b6101e0516101c05104016000526000516101a0515650005b600015610dd5575b6101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610c2157600080fd5b6006543b610c2e57600080fd5b6006543018610c3c57600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610c6257600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e0511015610c9757610c75565b6389f2a8716103005261014051610320526101405130311015610cb957600080fd5b6101405130310361034052610200516103605261036051610340516103205160065801610840565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610d1057610ced565b6103c0516102c052610160516102c0511015610d2b57600080fd5b6006543b610d3857600080fd5b6006543018610d4657600080fd5b60206104a0604463a9059cbb610400526101c051610420526102c0516104405261041c60006006545af1610d7957600080fd5b6000506104a0516103e0526103e051610d9157600080fd5b6102c051610140516101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a46102c0516000526000516101e0515650005b63f39b5b9b6000511415610e3957638c717a33610140523461016052600435610180526024356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610be9565b610240526102405160005260206000f350005b63ad65d76d6000511415610ec8576044356020518110610e5857600080fd5b506000604435141530604435141516610e7057600080fd5b638c717a33610140523461016052600435610180526024356101a052336101c0526044356101e0526101e0516101c0516101a051610180516101605160065801610be9565b610240526102405160005260206000f350005b600015611103575b6101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610f0857600080fd5b6006543b610f1557600080fd5b6006543018610f2357600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610f4957600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e0511015610f7e57610f5c565b63fd11c2236103005261014051610320526101605130311015610fa057600080fd5b61016051303103610340526102005161036052610360516103405161032051600658016109bc565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610ff757610fd4565b6103c0516102c05260016102c05102610400526104005161016051101561101d57600080fd5b6104005161016051036103e05260006103e05111156110535760006000600060006103e0516101a0516000f161105257600080fd5b5b6006543b61106057600080fd5b600654301861106e57600080fd5b60206104e0604463a9059cbb610440526101c05161046052610140516104805261045c60006006545af16110a157600080fd5b6000506104e05161042052610420516110b957600080fd5b6101405160016102c051026101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a460016102c051026000526000516101e0515650005b636b1d4db7600051141561116757632dff394e610140526004356101605234610180526024356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610ed0565b610240526102405160005260206000f350005b630b57363860005114156111f657604435602051811061118657600080fd5b50600060443514153060443514151661119e57600080fd5b632dff394e610140526004356101605234610180526024356101a052336101c0526044356101e0526101e0516101c0516101a051610180516101605160065801610ed0565b610240526102405160005260206000f350005b600015611400575b6101e0526101405261016052610180526101a0526101c052600061016051116000610140511116426101805110151661123657600080fd5b6006543b61124357600080fd5b600654301861125157600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61127757600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e05110156112ac5761128a565b6389f2a871610300526101405161032052610200516103405230316103605261036051610340516103205160065801610840565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e05110151561130f576112ec565b6103c0516102c05260016102c051026103e052610160516103e051101561133557600080fd5b60006000600060006103e0516101c0516000f161135157600080fd5b6006543b61135e57600080fd5b600654301861136c57600080fd5b60206104e060646323b872dd610420526101a051610440523061046052610140516104805261043c60006006545af16113a457600080fd5b6000506104e05161040052610400516113bc57600080fd5b6103e051610140516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103e0516000526000516101e0515650005b6395e3c50b600051141561147157341561141957600080fd5b63fa1bb7be6101405260043561016052602435610180526044356101a052336101c052336101e0526101e0516101c0516101a0516101805161016051600658016111fe565b610240526102405160005260206000f350005b637237e031600051141561150d57341561148a57600080fd5b606435602051811061149b57600080fd5b5060006064351415306064351415166114b357600080fd5b63fa1bb7be6101405260043561016052602435610180526044356101a052336101c0526064356101e0526101e0516101c0516101a0516101805161016051600658016111fe565b610240526102405160005260206000f350005b600015611704575b6101e0526101405261016052610180526101a0526101c05260006101405111426101805110151661154557600080fd5b6006543b61155257600080fd5b600654301861156057600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61158657600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e05110156115bb57611599565b63fd11c2236103005261014051610320526102005161034052303161036052610360516103405161032051600658016109bc565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e05110151561161e576115fb565b6103c0516102c0526102c05161016051101561163957600080fd5b6000600060006000610140516101c0516000f161165557600080fd5b6006543b61166257600080fd5b600654301861167057600080fd5b60206104c060646323b872dd610400526101a0516104205230610440526102c0516104605261041c60006006545af16116a857600080fd5b6000506104c0516103e0526103e0516116c057600080fd5b610140516102c0516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46102c0516000526000516101e0515650005b63013efd8b600051141561177557341561171d57600080fd5b63984fe8f66101405260043561016052602435610180526044356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801611515565b610240526102405160005260206000f350005b63d4e4841d600051141561181157341561178e57600080fd5b606435602051811061179f57600080fd5b5060006064351415306064351415166117b757600080fd5b63984fe8f66101405260043561016052602435610180526044356101a052336101c0526064356101e0526101e0516101c0516101a051610180516101605160065801611515565b610240526102405160005260206000f350005b600015611a8e575b610220526101405261016052610180526101a0526101c0526101e0526102005260006101805111600061016051111660006101405111426101a0511015161661186157600080fd5b6000610200511415306102005114151661187a57600080fd5b6006543b61188757600080fd5b600654301861189557600080fd5b60206102e060246370a0823161026052306102805261027c6006545afa6118bb57600080fd5b6000506102e05161024052610140610320525b610320515160206103205101610320526103206103205110156118f0576118ce565b6389f2a871610340526101405161036052610240516103805230316103a0526103a051610380516103605160065801610840565b61040052610300610320525b610320515260206103205103610320526101406103205110151561195357611930565b610400516103005260016103005102610420526101805161042051101561197957600080fd5b6006543b61198657600080fd5b600654301861199457600080fd5b602061052060646323b872dd610460526101c05161048052306104a052610140516104c05261047c60006006545af16119cc57600080fd5b6000506105205161044052610440516119e457600080fd5b610200513b6119f257600080fd5b610200513018611a0157600080fd5b6020610620606463ad65d76d6105605261016051610580526101a0516105a0526101e0516105c05261057c61042051610200515af1611a3f57600080fd5b600050610620516105405261042051610140516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a461054051600052600051610220515650005b63ddf7e1a76000511415611ba6573415611aa757600080fd5b6084356020518110611ab857600080fd5b506007543b611ac657600080fd5b6007543018611ad457600080fd5b60206101e060246306f2bf62610160526084356101805261017c6007545afa611afc57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163204ea33b610220526004356102405260243561026052604435610280526064356102a052336102c052336102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611819565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63f552d91b6000511415611cd2573415611bbf57600080fd5b6084356020518110611bd057600080fd5b5060a4356020518110611be257600080fd5b506007543b611bf057600080fd5b6007543018611bfe57600080fd5b60206101e060246306f2bf626101605260a4356101805261017c6007545afa611c2657600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163204ea33b610220526004356102405260243561026052604435610280526064356102a052336102c0526084356102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611819565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b600015611f99575b610220526101405261016052610180526101a0526101c0526101e05261020052600061018051116000610140511116426101a051101516611d1a57600080fd5b60006102005114153061020051141516611d3357600080fd5b610200513b611d4157600080fd5b610200513018611d5057600080fd5b60206102e060246359e9486261026052610140516102805261027c610200515afa611d7a57600080fd5b6000506102e051610240526006543b611d9257600080fd5b6006543018611da057600080fd5b60206103a060246370a0823161032052306103405261033c6006545afa611dc657600080fd5b6000506103a051610300526101406103e0525b6103e0515160206103e051016103e0526103e06103e0511015611dfb57611dd9565b63fd11c2236104005261024051610420526103005161044052303161046052610460516104405161042051600658016109bc565b6104c0526103c06103e0525b6103e0515260206103e051036103e0526101406103e051101515611e5e57611e3b565b6104c0516103c052610240516101805110156103c05161016051101516611e8457600080fd5b6006543b611e9157600080fd5b6006543018611e9f57600080fd5b60206105c060646323b872dd610500526101c0516105205230610540526103c0516105605261051c60006006545af1611ed757600080fd5b6000506105c0516104e0526104e051611eef57600080fd5b610200513b611efd57600080fd5b610200513018611f0c57600080fd5b60206106c06064630b5736386106005261014051610620526101a051610640526101e0516106605261061c61024051610200515af1611f4a57600080fd5b6000506106c0516105e052610240516103c0516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103c051600052600051610220515650005b63b040d54560005114156120b1573415611fb257600080fd5b6084356020518110611fc357600080fd5b506007543b611fd157600080fd5b6007543018611fdf57600080fd5b60206101e060246306f2bf62610160526084356101805261017c6007545afa61200757600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051631a7b28f2610220526004356102405260243561026052604435610280526064356102a052336102c052336102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611cda565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63f3c0efe960005114156121dd5734156120ca57600080fd5b60843560205181106120db57600080fd5b5060a43560205181106120ed57600080fd5b506007543b6120fb57600080fd5b600754301861210957600080fd5b60206101e060246306f2bf626101605260a4356101805261017c6007545afa61213157600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051631a7b28f2610220526004356102405260243561026052604435610280526064356102a052336102c0526084356102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611cda565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63b1cb43bf60005114156122765734156121f657600080fd5b608435602051811061220757600080fd5b5063204ea33b6101405260043561016052602435610180526044356101a0526064356101c052336101e05233610200526084356102205261022051610200516101e0516101c0516101a051610180516101605160065801611819565b610280526102805160005260206000f350005b63ec384a3e600051141561233157341561228f57600080fd5b60843560205181106122a057600080fd5b5060a43560205181106122b257600080fd5b5030608435186122c157600080fd5b63204ea33b6101405260043561016052602435610180526044356101a0526064356101c052336101e0526084356102005260a4356102205261022051610200516101e0516101c0516101a051610180516101605160065801611819565b610280526102805160005260206000f350005b63ea650c7d60005114156123ca57341561234a57600080fd5b608435602051811061235b57600080fd5b50631a7b28f26101405260043561016052602435610180526044356101a0526064356101c052336101e05233610200526084356102205261022051610200516101e0516101c0516101a051610180516101605160065801611cda565b610280526102805160005260206000f350005b63981a132760005114156124855734156123e357600080fd5b60843560205181106123f457600080fd5b5060a435602051811061240657600080fd5b50306084351861241557600080fd5b631a7b28f26101405260043561016052602435610180526044356101a0526064356101c052336101e0526084356102005260a4356102205261022051610200516101e0516101c0516101a051610180516101605160065801611cda565b610280526102805160005260206000f350005b63cd7724c3600051141561256f57341561249e57600080fd5b6000600435116124ad57600080fd5b6006543b6124ba57600080fd5b60065430186124c857600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6124ee57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e0516389f2a8716102205260043561024052303161026052610140516102805261028051610260516102405160065801610840565b6102e0526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f350005b6359e94862600051141561266c57341561258857600080fd5b60006004351161259757600080fd5b6006543b6125a457600080fd5b60065430186125b257600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6125d857600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e0516102005163fd11c2236102405260043561026052303161028052610140516102a0526102a0516102805161026051600658016109bc565b61030052610200526101e0526101c0526101a05261018052610160526101405261030051610200526001610200510260005260206000f350005b6395b68fe7600051141561276957341561268557600080fd5b60006004351161269457600080fd5b6006543b6126a157600080fd5b60065430186126af57600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6126d557600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051610200516389f2a8716102405260043561026052610140516102805230316102a0526102a051610280516102605160065801610840565b61030052610200526101e0526101c0526101a05261018052610160526101405261030051610200526001610200510260005260206000f350005b632640f62c600051141561285357341561278257600080fd5b60006004351161279157600080fd5b6006543b61279e57600080fd5b60065430186127ac57600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6127d257600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163fd11c22361022052600435610240526101405161026052303161028052610280516102605161024051600658016109bc565b6102e0526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f350005b639d76ea58600051141561287a57341561286c57600080fd5b60065460005260206000f350005b63966dae0e60005114156128a157341561289357600080fd5b60075460005260206000f350005b6370a0823160005114156128e85734156128ba57600080fd5b60043560205181106128cb57600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b63a9059cbb60005114156129a557341561290157600080fd5b600435602051811061291257600080fd5b5060043360e05260c052604060c0206024358154101561293157600080fd5b602435815403815550600460043560e05260c052604060c0208054602435825401101561295d57600080fd5b60243581540181555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd6000511415612aad5734156129be57600080fd5b60043560205181106129cf57600080fd5b5060243560205181106129e157600080fd5b50600460043560e05260c052604060c02060443581541015612a0257600080fd5b604435815403815550600460243560e05260c052604060c02080546044358254011015612a2e57600080fd5b604435815401815550600560043560e05260c052604060c0203360e05260c052604060c02060443581541015612a6357600080fd5b604435815403815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b36000511415612b37573415612ac657600080fd5b6004356020518110612ad757600080fd5b5060243560053360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b63dd62ed3e6000511415612b9e573415612b5057600080fd5b6004356020518110612b6157600080fd5b506024356020518110612b7357600080fd5b50600560043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b6306fdde036000511415612bc5573415612bb757600080fd5b60005460005260206000f350005b6395d89b416000511415612bec573415612bde57600080fd5b60015460005260206000f350005b63313ce5676000511415612c13573415612c0557600080fd5b60025460005260206000f350005b6318160ddd6000511415612c3a573415612c2c57600080fd5b60035460005260206000f350005b5b638c717a33610140523461016052600161018052426101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610be9565b61024052610240",
  "source": "# @title Uniswap Exchange Interface V1\n# @notice Source code found at https://github.com/uniswap\n# @notice Use at your own risk\n# Modified from UniSwap: https://github.com/uniswap\nfrom vyper.interfaces import ERC20\n\ncontract Factory():\n    def getExchange(token_addr: address) -> address: constant\n\ncontract Exchange():\n    def getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei): constant\n    def ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\n    def ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei): modifying\n\nTokenPurchase: event({buyer: indexed(address), eth_sold: indexed(uint256(wei)), tokens_bought: indexed(uint256)})\nEthPurchase: event({buyer: indexed(address), tokens_sold: indexed(uint256), eth_bought: indexed(uint256(wei))})\nAddLiquidity: event({provider: indexed(address), eth_amount: indexed(uint256(wei)), token_amount: indexed(uint256)})\nRemoveLiquidity: event({provider: indexed(address), eth_amount: indexed(uint256(wei)), token_amount: indexed(uint256)})\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\n\nname: public(bytes32)                             # Uniswap V1\nsymbol: public(bytes32)                           # UNI-V1\ndecimals: public(uint256)                         # 18\ntotalSupply: public(uint256)                      # total number of UNI in existence\nbalances: map(address, uint256)                   # UNI balance of an address\nallowances: map(address, map(address, uint256))   # UNI allowance of one address on another\ntoken: ERC20                                      # address of the ERC20 token traded on this contract\nfactory: Factory                                  # interface for the factory that created this contract\n\n# @dev This function acts as a contract constructor which is not currently supported in contracts deployed\n#      using create_with_code_of(). It is called once by the factory during contract creation.\n@public\ndef setup(token_addr: address):\n    assert (self.factory == ZERO_ADDRESS and self.token == ZERO_ADDRESS) and token_addr != ZERO_ADDRESS\n    self.factory = Factory(msg.sender)\n    self.token = ERC20(token_addr)\n    self.name = 0x556e697377617020563100000000000000000000000000000000000000000000\n    self.symbol = 0x554e492d56310000000000000000000000000000000000000000000000000000\n    self.decimals = 18\n\n# @notice Deposit ETH and Tokens (self.token) at current ratio to mint UNI tokens.\n# @dev min_liquidity does nothing when total UNI supply is 0.\n# @param min_liquidity Minimum number of UNI sender will mint if total UNI supply is greater than 0.\n# @param max_tokens Maximum number of tokens deposited. Deposits max amount if total UNI supply is 0.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return The amount of UNI minted.\n@public\n@payable\ndef addLiquidity(min_liquidity: uint256, max_tokens: uint256, deadline: timestamp) -> uint256:\n    assert deadline > block.timestamp and (max_tokens > 0 and msg.value > 0)\n    total_liquidity: uint256 = self.totalSupply\n    if total_liquidity > 0:\n        assert min_liquidity > 0\n        eth_reserve: uint256(wei) = self.balance - msg.value\n        token_reserve: uint256 = self.token.balanceOf(self)\n        token_amount: uint256 = msg.value * token_reserve / eth_reserve + 1\n        liquidity_minted: uint256 = msg.value * total_liquidity / eth_reserve\n        assert max_tokens >= token_amount and liquidity_minted >= min_liquidity\n        self.balances[msg.sender] += liquidity_minted\n        self.totalSupply = total_liquidity + liquidity_minted\n        transfer_successful: bool = self.token.transferFrom(msg.sender, self, token_amount)\n        assert transfer_successful\n        log.AddLiquidity(msg.sender, msg.value, token_amount)\n        log.Transfer(ZERO_ADDRESS, msg.sender, liquidity_minted)\n        return liquidity_minted\n    else:\n        assert (self.factory != ZERO_ADDRESS and self.token != ZERO_ADDRESS) and msg.value >= 1000000000\n        assert self.factory.getExchange(self.token) == self\n        token_amount: uint256 = max_tokens\n        initial_liquidity: uint256 = as_unitless_number(self.balance)\n        self.totalSupply = initial_liquidity\n        self.balances[msg.sender] = initial_liquidity\n        transfer_successful: bool =  self.token.transferFrom(msg.sender, self, token_amount)\n        assert transfer_successful\n        log.AddLiquidity(msg.sender, msg.value, token_amount)\n        log.Transfer(ZERO_ADDRESS, msg.sender, initial_liquidity)\n        return initial_liquidity\n\n# @dev Burn UNI tokens to withdraw ETH and Tokens at current ratio.\n# @param amount Amount of UNI burned.\n# @param min_eth Minimum ETH withdrawn.\n# @param min_tokens Minimum Tokens withdrawn.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return The amount of ETH and Tokens withdrawn.\n@public\ndef removeLiquidity(amount: uint256, min_eth: uint256(wei), min_tokens: uint256, deadline: timestamp) -> (uint256(wei), uint256):\n    assert (amount > 0 and deadline > block.timestamp) and (min_eth > 0 and min_tokens > 0)\n    total_liquidity: uint256 = self.totalSupply\n    assert total_liquidity > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_amount: uint256(wei) = amount * self.balance / total_liquidity\n    token_amount: uint256 = amount * token_reserve / total_liquidity\n    assert eth_amount >= min_eth and token_amount >= min_tokens\n    self.balances[msg.sender] -= amount\n    self.totalSupply = total_liquidity - amount\n    send(msg.sender, eth_amount)\n    transfer_successful: bool = self.token.transfer(msg.sender, token_amount)\n    assert transfer_successful\n    log.RemoveLiquidity(msg.sender, eth_amount, token_amount)\n    log.Transfer(msg.sender, ZERO_ADDRESS, amount)\n    return eth_amount, token_amount\n\n# @dev Pricing function for converting between ETH and Tokens.\n# @param input_amount Amount of ETH or Tokens being sold.\n# @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\n# @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\n# @return Amount of ETH or Tokens bought.\n@private\n@constant\ndef getInputPrice(input_amount: uint256, input_reserve: uint256, output_reserve: uint256) -> uint256:\n    assert input_reserve > 0 and output_reserve > 0\n    input_amount_with_fee: uint256 = input_amount * 997\n    numerator: uint256 = input_amount_with_fee * output_reserve\n    denominator: uint256 = (input_reserve * 1000) + input_amount_with_fee\n    return numerator / denominator\n\n# @dev Pricing function for converting between ETH and Tokens.\n# @param output_amount Amount of ETH or Tokens being bought.\n# @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\n# @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\n# @return Amount of ETH or Tokens sold.\n@private\n@constant\ndef getOutputPrice(output_amount: uint256, input_reserve: uint256, output_reserve: uint256) -> uint256:\n    assert input_reserve > 0 and output_reserve > 0\n    numerator: uint256 = input_reserve * output_amount * 1000\n    denominator: uint256 = (output_reserve - output_amount) * 997\n    return numerator / denominator + 1\n\n@private\ndef ethToTokenInput(eth_sold: uint256(wei), min_tokens: uint256, deadline: timestamp, buyer: address, recipient: address) -> uint256:\n    assert deadline >= block.timestamp and (eth_sold > 0 and min_tokens > 0)\n    token_reserve: uint256 = self.token.balanceOf(self)\n    tokens_bought: uint256 = self.getInputPrice(as_unitless_number(eth_sold), as_unitless_number(self.balance - eth_sold), token_reserve)\n    assert tokens_bought >= min_tokens\n    transfer_successful: bool = self.token.transfer(recipient, tokens_bought)\n    assert transfer_successful\n    log.TokenPurchase(buyer, eth_sold, tokens_bought)\n    return tokens_bought\n\n# @notice Convert ETH to Tokens.\n# @dev User specifies exact input (msg.value).\n# @dev User cannot specify minimum output or deadline.\n@public\n@payable\ndef __default__():\n    self.ethToTokenInput(msg.value, 1, block.timestamp, msg.sender, msg.sender)\n\n# @notice Convert ETH to Tokens.\n# @dev User specifies exact input (msg.value) and minimum output.\n# @param min_tokens Minimum Tokens bought.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return Amount of Tokens bought.\n@public\n@payable\ndef ethToTokenSwapInput(min_tokens: uint256, deadline: timestamp) -> uint256:\n    return self.ethToTokenInput(msg.value, min_tokens, deadline, msg.sender, msg.sender)\n\n# @notice Convert ETH to Tokens and transfers Tokens to recipient.\n# @dev User specifies exact input (msg.value) and minimum output\n# @param min_tokens Minimum Tokens bought.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output Tokens.\n# @return Amount of Tokens bought.\n@public\n@payable\ndef ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256:\n    assert recipient != self and recipient != ZERO_ADDRESS\n    return self.ethToTokenInput(msg.value, min_tokens, deadline, msg.sender, recipient)\n\n@private\ndef ethToTokenOutput(tokens_bought: uint256, max_eth: uint256(wei), deadline: timestamp, buyer: address, recipient: address) -> uint256(wei):\n    assert deadline >= block.timestamp and (tokens_bought > 0 and max_eth > 0)\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_sold: uint256 = self.getOutputPrice(tokens_bought, as_unitless_number(self.balance - max_eth), token_reserve)\n    # Throws if eth_sold > max_eth\n    eth_refund: uint256(wei) = max_eth - as_wei_value(eth_sold, 'wei')\n    if eth_refund > 0:\n        send(buyer, eth_refund)\n    transfer_successful: bool = self.token.transfer(recipient, tokens_bought)\n    assert transfer_successful\n    log.TokenPurchase(buyer, as_wei_value(eth_sold, 'wei'), tokens_bought)\n    return as_wei_value(eth_sold, 'wei')\n\n# @notice Convert ETH to Tokens.\n# @dev User specifies maximum input (msg.value) and exact output.\n# @param tokens_bought Amount of tokens bought.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return Amount of ETH sold.\n@public\n@payable\ndef ethToTokenSwapOutput(tokens_bought: uint256, deadline: timestamp) -> uint256(wei):\n    return self.ethToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, msg.sender)\n\n# @notice Convert ETH to Tokens and transfers Tokens to recipient.\n# @dev User specifies maximum input (msg.value) and exact output.\n# @param tokens_bought Amount of tokens bought.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output Tokens.\n# @return Amount of ETH sold.\n@public\n@payable\ndef ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei):\n    assert recipient != self and recipient != ZERO_ADDRESS\n    return self.ethToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, recipient)\n\n@private\ndef tokenToEthInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, buyer: address, recipient: address) -> uint256(wei):\n    assert deadline >= block.timestamp and (tokens_sold > 0 and min_eth > 0)\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\n    wei_bought: uint256(wei) = as_wei_value(eth_bought, 'wei')\n    assert wei_bought >= min_eth\n    send(recipient, wei_bought)\n    transfer_successful: bool = self.token.transferFrom(buyer, self, tokens_sold)\n    assert transfer_successful\n    log.EthPurchase(buyer, tokens_sold, wei_bought)\n    return wei_bought\n\n\n# @notice Convert Tokens to ETH.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_eth Minimum ETH purchased.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return Amount of ETH bought.\n@public\ndef tokenToEthSwapInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp) -> uint256(wei):\n    return self.tokenToEthInput(tokens_sold, min_eth, deadline, msg.sender, msg.sender)\n\n# @notice Convert Tokens to ETH and transfers ETH to recipient.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_eth Minimum ETH purchased.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @return Amount of ETH bought.\n@public\ndef tokenToEthTransferInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, recipient: address) -> uint256(wei):\n    assert recipient != self and recipient != ZERO_ADDRESS\n    return self.tokenToEthInput(tokens_sold, min_eth, deadline, msg.sender, recipient)\n\n@private\ndef tokenToEthOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, buyer: address, recipient: address) -> uint256:\n    assert deadline >= block.timestamp and eth_bought > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    tokens_sold: uint256 = self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\n    # tokens sold is always > 0\n    assert max_tokens >= tokens_sold\n    send(recipient, eth_bought)\n    transfer_successful: bool = self.token.transferFrom(buyer, self, tokens_sold)\n    assert transfer_successful\n    log.EthPurchase(buyer, tokens_sold, eth_bought)\n    return tokens_sold\n\n# @notice Convert Tokens to ETH.\n# @dev User specifies maximum input and exact output.\n# @param eth_bought Amount of ETH purchased.\n# @param max_tokens Maximum Tokens sold.\n# @param deadline Time after which this transaction can no longer be executed.\n# @return Amount of Tokens sold.\n@public\ndef tokenToEthSwapOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp) -> uint256:\n    return self.tokenToEthOutput(eth_bought, max_tokens, deadline, msg.sender, msg.sender)\n\n# @notice Convert Tokens to ETH and transfers ETH to recipient.\n# @dev User specifies maximum input and exact output.\n# @param eth_bought Amount of ETH purchased.\n# @param max_tokens Maximum Tokens sold.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @return Amount of Tokens sold.\n@public\ndef tokenToEthTransferOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, recipient: address) -> uint256:\n    assert recipient != self and recipient != ZERO_ADDRESS\n    return self.tokenToEthOutput(eth_bought, max_tokens, deadline, msg.sender, recipient)\n\n@private\ndef tokenToTokenInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, buyer: address, recipient: address, exchange_addr: address) -> uint256:\n    assert (deadline >= block.timestamp and tokens_sold > 0) and (min_tokens_bought > 0 and min_eth_bought > 0)\n    assert exchange_addr != self and exchange_addr != ZERO_ADDRESS\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\n    wei_bought: uint256(wei) = as_wei_value(eth_bought, 'wei')\n    assert wei_bought >= min_eth_bought\n    transfer_successful: bool = self.token.transferFrom(buyer, self, tokens_sold)\n    assert transfer_successful\n    tokens_bought: uint256 = Exchange(exchange_addr).ethToTokenTransferInput(min_tokens_bought, deadline, recipient, value=wei_bought)\n    log.EthPurchase(buyer, tokens_sold, wei_bought)\n    return tokens_bought\n\n# @notice Convert Tokens (self.token) to Tokens (token_addr).\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n# @param min_eth_bought Minimum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (token_addr) bought.\n@public\ndef tokenToTokenSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, token_addr: address) -> uint256:\n    exchange_addr: address = self.factory.getExchange(token_addr)\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, msg.sender, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (token_addr) and transfers\n#         Tokens (token_addr) to recipient.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n# @param min_eth_bought Minimum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (token_addr) bought.\n@public\ndef tokenToTokenTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256:\n    exchange_addr: address = self.factory.getExchange(token_addr)\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, recipient, exchange_addr)\n\n@private\ndef tokenToTokenOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, buyer: address, recipient: address, exchange_addr: address) -> uint256:\n    assert deadline >= block.timestamp and (tokens_bought > 0 and max_eth_sold > 0)\n    assert exchange_addr != self and exchange_addr != ZERO_ADDRESS\n    eth_bought: uint256(wei) = Exchange(exchange_addr).getEthToTokenOutputPrice(tokens_bought)\n    token_reserve: uint256 = self.token.balanceOf(self)\n    tokens_sold: uint256 = self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\n    # tokens sold is always > 0\n    assert max_tokens_sold >= tokens_sold and max_eth_sold >= eth_bought\n    transfer_successful: bool = self.token.transferFrom(buyer, self, tokens_sold)\n    assert transfer_successful\n    eth_sold: uint256(wei) = Exchange(exchange_addr).ethToTokenTransferOutput(tokens_bought, deadline, recipient, value=eth_bought)\n    log.EthPurchase(buyer, tokens_sold, eth_bought)\n    return tokens_sold\n\n# @notice Convert Tokens (self.token) to Tokens (token_addr).\n# @dev User specifies maximum input and exact output.\n# @param tokens_bought Amount of Tokens (token_addr) bought.\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\n# @param max_eth_sold Maximum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (self.token) sold.\n@public\ndef tokenToTokenSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, token_addr: address) -> uint256:\n    exchange_addr: address = self.factory.getExchange(token_addr)\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, msg.sender, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (token_addr) and transfers\n#         Tokens (token_addr) to recipient.\n# @dev User specifies maximum input and exact output.\n# @param tokens_bought Amount of Tokens (token_addr) bought.\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\n# @param max_eth_sold Maximum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (self.token) sold.\n@public\ndef tokenToTokenTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256:\n    exchange_addr: address = self.factory.getExchange(token_addr)\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, recipient, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token).\n# @dev Allows trades through contracts that were not deployed from the same factory.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n# @param min_eth_bought Minimum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param exchange_addr The address of the exchange for the token being purchased.\n# @return Amount of Tokens (exchange_addr.token) bought.\n@public\ndef tokenToExchangeSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256:\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, msg.sender, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers\n#         Tokens (exchange_addr.token) to recipient.\n# @dev Allows trades through contracts that were not deployed from the same factory.\n# @dev User specifies exact input and minimum output.\n# @param tokens_sold Amount of Tokens sold.\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n# @param min_eth_bought Minimum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @param exchange_addr The address of the exchange for the token being purchased.\n# @return Amount of Tokens (exchange_addr.token) bought.\n@public\ndef tokenToExchangeTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256:\n    assert recipient != self\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, recipient, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token).\n# @dev Allows trades through contracts that were not deployed from the same factory.\n# @dev User specifies maximum input and exact output.\n# @param tokens_bought Amount of Tokens (token_addr) bought.\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\n# @param max_eth_sold Maximum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param exchange_addr The address of the exchange for the token being purchased.\n# @return Amount of Tokens (self.token) sold.\n@public\ndef tokenToExchangeSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256:\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, msg.sender, exchange_addr)\n\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers\n#         Tokens (exchange_addr.token) to recipient.\n# @dev Allows trades through contracts that were not deployed from the same factory.\n# @dev User specifies maximum input and exact output.\n# @param tokens_bought Amount of Tokens (token_addr) bought.\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\n# @param max_eth_sold Maximum ETH purchased as intermediary.\n# @param deadline Time after which this transaction can no longer be executed.\n# @param recipient The address that receives output ETH.\n# @param token_addr The address of the token being purchased.\n# @return Amount of Tokens (self.token) sold.\n@public\ndef tokenToExchangeTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256:\n    assert recipient != self\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, recipient, exchange_addr)\n\n# @notice Public price function for ETH to Token trades with an exact input.\n# @param eth_sold Amount of ETH sold.\n# @return Amount of Tokens that can be bought with input ETH.\n@public\n@constant\ndef getEthToTokenInputPrice(eth_sold: uint256(wei)) -> uint256:\n    assert eth_sold > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    return self.getInputPrice(as_unitless_number(eth_sold), as_unitless_number(self.balance), token_reserve)\n\n# @notice Public price function for ETH to Token trades with an exact output.\n# @param tokens_bought Amount of Tokens bought.\n# @return Amount of ETH needed to buy output Tokens.\n@public\n@constant\ndef getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei):\n    assert tokens_bought > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_sold: uint256 = self.getOutputPrice(tokens_bought, as_unitless_number(self.balance), token_reserve)\n    return as_wei_value(eth_sold, 'wei')\n\n# @notice Public price function for Token to ETH trades with an exact input.\n# @param tokens_sold Amount of Tokens sold.\n# @return Amount of ETH that can be bought with input Tokens.\n@public\n@constant\ndef getTokenToEthInputPrice(tokens_sold: uint256) -> uint256(wei):\n    assert tokens_sold > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\n    return as_wei_value(eth_bought, 'wei')\n\n# @notice Public price function for Token to ETH trades with an exact output.\n# @param eth_bought Amount of output ETH.\n# @return Amount of Tokens needed to buy output ETH.\n@public\n@constant\ndef getTokenToEthOutputPrice(eth_bought: uint256(wei)) -> uint256:\n    assert eth_bought > 0\n    token_reserve: uint256 = self.token.balanceOf(self)\n    return self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\n\n# @return Address of Token that is sold on this exchange.\n@public\n@constant\ndef tokenAddress() -> address:\n    return self.token\n\n# @return Address of factory that created this exchange.\n@public\n@constant\ndef factoryAddress() -> address(Factory):\n    return self.factory\n\n# ERC20 compatibility for exchange liquidity modified from\n# https://github.com/ethereum/vyper/blob/master/examples/tokens/ERC20.vy\n@public\n@constant\ndef balanceOf(_owner : address) -> uint256:\n    return self.balances[_owner]\n\n@public\ndef transfer(_to : address, _value : uint256) -> bool:\n    self.balances[msg.sender] -= _value\n    self.balances[_to] += _value\n    log.Transfer(msg.sender, _to, _value)\n    return True\n\n@public\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n    self.balances[_from] -= _value\n    self.balances[_to] += _value\n    self.allowances[_from][msg.sender] -= _value\n    log.Transfer(_from, _to, _value)\n    return True\n\n@public\ndef approve(_spender : address, _value : uint256) -> bool:\n    self.allowances[msg.sender][_spender] = _value\n    log.Approval(msg.sender, _spender, _value)\n    return True\n\n@public\n@constant\ndef allowance(_owner : address, _spender : address) -> uint256:\n    return self.allowances[_owner][_spender]\n",
  "sourcePath": "/Users/Karim/Desktop/atomicoptions/contracts/lib/uniswap/uniswap_exchange.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b12+commit.32ce6c9"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-11-11T18:43:02.609Z"
}