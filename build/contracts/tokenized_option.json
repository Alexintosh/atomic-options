{
  "contractName": "tokenized_option",
  "abi": [
    {
      "name": "setup",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_issuer"
        },
        {
          "type": "address",
          "name": "_buyer"
        },
        {
          "type": "address",
          "name": "_base_addr"
        },
        {
          "type": "address",
          "name": "_asset_addr"
        },
        {
          "type": "uint256",
          "name": "_fee"
        },
        {
          "type": "uint256",
          "name": "_strike_price_base"
        },
        {
          "type": "uint256",
          "name": "_strike_price_quote"
        },
        {
          "type": "uint256",
          "name": "_volume"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "_maturity_time"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "_expiry_time"
        },
        {
          "type": "address",
          "name": "_token_template"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 793219
    },
    {
      "name": "collateralize",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 42038
    },
    {
      "name": "pay_fee",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 42269
    },
    {
      "name": "exercise_from_asset",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "asset_volume_exercised"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 118806
    },
    {
      "name": "exercise_from_base",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "base_volume_exercised"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 119129
    },
    {
      "name": "expire",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 49370
    },
    {
      "name": "get_info",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        },
        {
          "type": "address",
          "name": "out"
        },
        {
          "type": "address",
          "name": "out"
        },
        {
          "type": "address",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "out"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "out"
        },
        {
          "type": "address",
          "name": "out"
        },
        {
          "type": "address",
          "name": "out"
        },
        {
          "type": "address",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 4049
    },
    {
      "name": "issuer",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 791
    },
    {
      "name": "buyer",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 821
    },
    {
      "name": "base_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 851
    },
    {
      "name": "asset_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 881
    },
    {
      "name": "fee",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 911
    },
    {
      "name": "strike_price_base",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 941
    },
    {
      "name": "strike_price_quote",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 971
    },
    {
      "name": "volume",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1001
    },
    {
      "name": "maturity_time",
      "outputs": [
        {
          "type": "uint256",
          "unit": "sec",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1031
    },
    {
      "name": "expiry_time",
      "outputs": [
        {
          "type": "uint256",
          "unit": "sec",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1061
    },
    {
      "name": "token_template",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1091
    },
    {
      "name": "option_claim_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1121
    },
    {
      "name": "collateral_claim_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1151
    },
    {
      "name": "option_claim_supply",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1181
    },
    {
      "name": "collateral_claim_supply",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1211
    },
    {
      "name": "state",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1241
    }
  ],
  "bytecode": "0x610ebc56600436101561000d57610eb2565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052629f1f13600051141561036b5734156100b957600080fd5b60043560205181106100ca57600080fd5b5060243560205181106100dc57600080fd5b5060443560205181106100ee57600080fd5b50606435602051811061010057600080fd5b5061014435602051811061011357600080fd5b506013541561012157600080fd5b6064356044351861013157600080fd5b6101043561012435114261012435111661014a57600080fd5b60043560005560243560015560443560025560643560035560843560045560a43560055560c43560065560e4356007556101043560085561012435600955604435600a55606435600b5561014435600c5560c4356101a757600080fd5b60c43560e43515156101ba5760006101da565b60a43560e43560a43560e4350204146101d257600080fd5b60a43560e435025b04600f5560e4356010557f6033600c60003960336000f33660006000376110006000366000730000000000610140526c01000000000000000000000000610144350261015b527f5af4602c57600080fd5b6110006000f30000000000000000000000000000000061016f5260606101406000f08061025757600080fd5b600d55600d546011556011543b61026d57600080fd5b601154301861027b57600080fd5b600060006024634313b9e56101e052600f54610200526101fc60006011545af16102a457600080fd5b7f6033600c60003960336000f33660006000376110006000366000730000000000610260526c01000000000000000000000000610144350261027b527f5af4602c57600080fd5b6110006000f30000000000000000000000000000000061028f5260606102606000f08061031757600080fd5b600e55600e546012556012543b61032d57600080fd5b601254301861033b57600080fd5b600060006024634313b9e5610300526010546103205261031c60006012545af161036457600080fd5b6001601355005b63eef9a8d5600051141561048357341561038457600080fd5b600054331461039257600080fd5b6001601354146103a157600080fd5b42600954116103af57600080fd5b600b543b6103bc57600080fd5b600b5430186103ca57600080fd5b602061022060646323b872dd6101605260005461018052306101a0526007546101c05261017c6000600b545af161040057600080fd5b60005061022051610140526101405161041857600080fd5b6012543b61042557600080fd5b601254301861043357600080fd5b6020610300604463a9059cbb61026052600054610280526007546102a05261027c60006012545af161046457600080fd5b60005061030051610240526102405161047c57600080fd5b6002601355005b639f771e1e600051141561059d57341561049c57600080fd5b60015433146104aa57600080fd5b6002601354146104b957600080fd5b42600954116104c757600080fd5b600a543b6104d457600080fd5b600a5430186104e257600080fd5b602061022060646323b872dd61016052600154610180526000546101a0526004546101c05261017c6000600a545af161051a57600080fd5b60005061022051610140526101405161053257600080fd5b6011543b61053f57600080fd5b601154301861054d57600080fd5b6020610300604463a9059cbb6102605260015461028052600f546102a05261027c60006011545af161057e57600080fd5b60005061030051610240526102405161059657600080fd5b6003601355005b6000156107ae575b6101a0526101405261016052610180524260085411154260095411166105ca57600080fd5b600460135414600360135414176105e057600080fd5b600061016051116105f057600080fd5b600754610180511115600061018051111661060a57600080fd5b600a543b61061757600080fd5b600a54301861062557600080fd5b60206102a060646323b872dd6101e0526101405161020052306102205261016051610240526101fc6000600a545af161065d57600080fd5b6000506102a0516101c0526101c05161067557600080fd5b6011543b61068257600080fd5b601154301861069057600080fd5b60206103806044639dc29fac6102e052610140516103005261016051610320526102fc60006011545af16106c357600080fd5b600050610380516102c0526102c0516106db57600080fd5b600b543b6106e857600080fd5b600b5430186106f657600080fd5b6020610460604463a9059cbb6103c0526001546103e05261018051610400526103dc6000600b545af161072857600080fd5b600050610460516103a0526103a05161074057600080fd5b6011543b61074d57600080fd5b601154301861075b57600080fd5b60206104e060046318160ddd6104805261049c6011545afa61077c57600080fd5b6000506104e051600f5561018051600754101561079857600080fd5b610180516007540360075560046013556101a051565b6396f5a49f600051141561084a5734156107c757600080fd5b6006546107d357600080fd5b60065460043515156107e6576000610806565b6005546004356005546004350204146107fe57600080fd5b600554600435025b046101405261014051633fcd498661018052336101a052610140516101c0526004356101e0526101e0516101c0516101a051600658016105a5565b61014052600050005b639ce0c9bd60005114156108f457341561086357600080fd5b600154331461087157600080fd5b60055461087d57600080fd5b60055460043515156108905760006108b0565b6006546004356006546004350204146108a857600080fd5b600654600435025b046101405261014051633fcd498661018052336101a0526004356101c052610140516101e0526101e0516101c0516101a051600658016105a5565b61014052600050005b6379599f966000511415610b8d57341561090d57600080fd5b6002601354144260095411151761092357600080fd5b60056013541861093257600080fd5b6012543b61093f57600080fd5b601254301861094d57600080fd5b60206101e060246370a0823161016052336101805261017c6012545afa61097357600080fd5b6000506101e0516101405260105461098a57600080fd5b60105461014051151561099e5760006109c1565b60075461014051600754610140510204146109b857600080fd5b60075461014051025b0461020052600a543b6109d357600080fd5b600a5430186109e157600080fd5b60206102c060246370a0823161024052306102605261025c600a545afa610a0757600080fd5b6000506102c05161022052601054610a1e57600080fd5b601054610140511515610a32576000610a58565b61022051610140516102205161014051020414610a4e57600080fd5b6102205161014051025b046102e0526012543b610a6a57600080fd5b6012543018610a7857600080fd5b60206103c06044639dc29fac610320523361034052610140516103605261033c60006012545af1610aa857600080fd5b6000506103c0516103005261030051610ac057600080fd5b600a543b610acd57600080fd5b600a543018610adb57600080fd5b60206104a0604463a9059cbb6104005233610420526102e0516104405261041c6000600a545af1610b0b57600080fd5b6000506104a0516103e0526103e051610b2357600080fd5b600b543b610b3057600080fd5b600b543018610b3e57600080fd5b6020610580604463a9059cbb6104e052336105005261020051610520526104fc6000600b545af1610b6e57600080fd5b600050610580516104c0526104c051610b8657600080fd5b6005601355005b63605834886000511415610c41573415610ba657600080fd5b61020061014052610160600054815260015481602001526002548160400152600354816060015260045481608001526005548160a001526006548160c001526007548160e00152600854816101000152600954816101200152600c54816101400152600d54816101600152600e54816101800152600f54816101a00152601054816101c00152601354816101e001525061014051610160f350005b631d1438486000511415610c68573415610c5a57600080fd5b60005460005260206000f350005b637150d8ae6000511415610c8f573415610c8157600080fd5b60015460005260206000f350005b63a77f55996000511415610cb6573415610ca857600080fd5b60025460005260206000f350005b635f7271896000511415610cdd573415610ccf57600080fd5b60035460005260206000f350005b63ddca3f436000511415610d04573415610cf657600080fd5b60045460005260206000f350005b63ba2215856000511415610d2b573415610d1d57600080fd5b60055460005260206000f350005b63e1b8d40f6000511415610d52573415610d4457600080fd5b60065460005260206000f350005b63c618a1e46000511415610d79573415610d6b57600080fd5b60075460005260206000f350005b63879a031a6000511415610da0573415610d9257600080fd5b60085460005260206000f350005b63fe3f3b816000511415610dc7573415610db957600080fd5b60095460005260206000f350005b630264e9056000511415610dee573415610de057600080fd5b600c5460005260206000f350005b631d6216a36000511415610e15573415610e0757600080fd5b600d5460005260206000f350005b63c1cf8e1e6000511415610e3c573415610e2e57600080fd5b600e5460005260206000f350005b63fad090296000511415610e63573415610e5557600080fd5b600f5460005260206000f350005b635a11e9606000511415610e8a573415610e7c57600080fd5b60105460005260206000f350005b63c19d93fb6000511415610eb1573415610ea357600080fd5b60135460005260206000f350005b5b60006000fd5b610004610ebc03610004600039610004610ebc036000f3",
  "deployedBytecode": "0x600436101561000d57610eb2565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052629f1f13600051141561036b5734156100b957600080fd5b60043560205181106100ca57600080fd5b5060243560205181106100dc57600080fd5b5060443560205181106100ee57600080fd5b50606435602051811061010057600080fd5b5061014435602051811061011357600080fd5b506013541561012157600080fd5b6064356044351861013157600080fd5b6101043561012435114261012435111661014a57600080fd5b60043560005560243560015560443560025560643560035560843560045560a43560055560c43560065560e4356007556101043560085561012435600955604435600a55606435600b5561014435600c5560c4356101a757600080fd5b60c43560e43515156101ba5760006101da565b60a43560e43560a43560e4350204146101d257600080fd5b60a43560e435025b04600f5560e4356010557f6033600c60003960336000f33660006000376110006000366000730000000000610140526c01000000000000000000000000610144350261015b527f5af4602c57600080fd5b6110006000f30000000000000000000000000000000061016f5260606101406000f08061025757600080fd5b600d55600d546011556011543b61026d57600080fd5b601154301861027b57600080fd5b600060006024634313b9e56101e052600f54610200526101fc60006011545af16102a457600080fd5b7f6033600c60003960336000f33660006000376110006000366000730000000000610260526c01000000000000000000000000610144350261027b527f5af4602c57600080fd5b6110006000f30000000000000000000000000000000061028f5260606102606000f08061031757600080fd5b600e55600e546012556012543b61032d57600080fd5b601254301861033b57600080fd5b600060006024634313b9e5610300526010546103205261031c60006012545af161036457600080fd5b6001601355005b63eef9a8d5600051141561048357341561038457600080fd5b600054331461039257600080fd5b6001601354146103a157600080fd5b42600954116103af57600080fd5b600b543b6103bc57600080fd5b600b5430186103ca57600080fd5b602061022060646323b872dd6101605260005461018052306101a0526007546101c05261017c6000600b545af161040057600080fd5b60005061022051610140526101405161041857600080fd5b6012543b61042557600080fd5b601254301861043357600080fd5b6020610300604463a9059cbb61026052600054610280526007546102a05261027c60006012545af161046457600080fd5b60005061030051610240526102405161047c57600080fd5b6002601355005b639f771e1e600051141561059d57341561049c57600080fd5b60015433146104aa57600080fd5b6002601354146104b957600080fd5b42600954116104c757600080fd5b600a543b6104d457600080fd5b600a5430186104e257600080fd5b602061022060646323b872dd61016052600154610180526000546101a0526004546101c05261017c6000600a545af161051a57600080fd5b60005061022051610140526101405161053257600080fd5b6011543b61053f57600080fd5b601154301861054d57600080fd5b6020610300604463a9059cbb6102605260015461028052600f546102a05261027c60006011545af161057e57600080fd5b60005061030051610240526102405161059657600080fd5b6003601355005b6000156107ae575b6101a0526101405261016052610180524260085411154260095411166105ca57600080fd5b600460135414600360135414176105e057600080fd5b600061016051116105f057600080fd5b600754610180511115600061018051111661060a57600080fd5b600a543b61061757600080fd5b600a54301861062557600080fd5b60206102a060646323b872dd6101e0526101405161020052306102205261016051610240526101fc6000600a545af161065d57600080fd5b6000506102a0516101c0526101c05161067557600080fd5b6011543b61068257600080fd5b601154301861069057600080fd5b60206103806044639dc29fac6102e052610140516103005261016051610320526102fc60006011545af16106c357600080fd5b600050610380516102c0526102c0516106db57600080fd5b600b543b6106e857600080fd5b600b5430186106f657600080fd5b6020610460604463a9059cbb6103c0526001546103e05261018051610400526103dc6000600b545af161072857600080fd5b600050610460516103a0526103a05161074057600080fd5b6011543b61074d57600080fd5b601154301861075b57600080fd5b60206104e060046318160ddd6104805261049c6011545afa61077c57600080fd5b6000506104e051600f5561018051600754101561079857600080fd5b610180516007540360075560046013556101a051565b6396f5a49f600051141561084a5734156107c757600080fd5b6006546107d357600080fd5b60065460043515156107e6576000610806565b6005546004356005546004350204146107fe57600080fd5b600554600435025b046101405261014051633fcd498661018052336101a052610140516101c0526004356101e0526101e0516101c0516101a051600658016105a5565b61014052600050005b639ce0c9bd60005114156108f457341561086357600080fd5b600154331461087157600080fd5b60055461087d57600080fd5b60055460043515156108905760006108b0565b6006546004356006546004350204146108a857600080fd5b600654600435025b046101405261014051633fcd498661018052336101a0526004356101c052610140516101e0526101e0516101c0516101a051600658016105a5565b61014052600050005b6379599f966000511415610b8d57341561090d57600080fd5b6002601354144260095411151761092357600080fd5b60056013541861093257600080fd5b6012543b61093f57600080fd5b601254301861094d57600080fd5b60206101e060246370a0823161016052336101805261017c6012545afa61097357600080fd5b6000506101e0516101405260105461098a57600080fd5b60105461014051151561099e5760006109c1565b60075461014051600754610140510204146109b857600080fd5b60075461014051025b0461020052600a543b6109d357600080fd5b600a5430186109e157600080fd5b60206102c060246370a0823161024052306102605261025c600a545afa610a0757600080fd5b6000506102c05161022052601054610a1e57600080fd5b601054610140511515610a32576000610a58565b61022051610140516102205161014051020414610a4e57600080fd5b6102205161014051025b046102e0526012543b610a6a57600080fd5b6012543018610a7857600080fd5b60206103c06044639dc29fac610320523361034052610140516103605261033c60006012545af1610aa857600080fd5b6000506103c0516103005261030051610ac057600080fd5b600a543b610acd57600080fd5b600a543018610adb57600080fd5b60206104a0604463a9059cbb6104005233610420526102e0516104405261041c6000600a545af1610b0b57600080fd5b6000506104a0516103e0526103e051610b2357600080fd5b600b543b610b3057600080fd5b600b543018610b3e57600080fd5b6020610580604463a9059cbb6104e052336105005261020051610520526104fc6000600b545af1610b6e57600080fd5b600050610580516104c0526104c051610b8657600080fd5b6005601355005b63605834886000511415610c41573415610ba657600080fd5b61020061014052610160600054815260015481602001526002548160400152600354816060015260045481608001526005548160a001526006548160c001526007548160e00152600854816101000152600954816101200152600c54816101400152600d54816101600152600e54816101800152600f54816101a00152601054816101c00152601354816101e001525061014051610160f350005b631d1438486000511415610c68573415610c5a57600080fd5b60005460005260206000f350005b637150d8ae6000511415610c8f573415610c8157600080fd5b60015460005260206000f350005b63a77f55996000511415610cb6573415610ca857600080fd5b60025460005260206000f350005b635f7271896000511415610cdd573415610ccf57600080fd5b60035460005260206000f350005b63ddca3f436000511415610d04573415610cf657600080fd5b60045460005260206000f350005b63ba2215856000511415610d2b573415610d1d57600080fd5b60055460005260206000f350005b63e1b8d40f6000511415610d52573415610d4457600080fd5b60065460005260206000f350005b63c618a1e46000511415610d79573415610d6b57600080fd5b60075460005260206000f350005b63879a031a6000511415610da0573415610d9257600080fd5b60085460005260206000f350005b63fe3f3b816000511415610dc7573415610db957600080fd5b60095460005260206000f350005b630264e9056000511415610dee573415610de057600080fd5b600c5460005260206000f350005b631d6216a36000511415610e15573415610e0757600080fd5b600d5460005260206000f350005b63c1cf8e1e6000511415610e3c573415610e2e57600080fd5b600e5460005260206000f350005b63fad090296000511415610e63573415610e5557600080fd5b600f5460005260206000f350005b635a11e9606000511415610e8a573415610e7c57600080fd5b60105460005260206000f350005b63c19d93fb6000511415610eb1573415610ea357600080fd5b60135460005260206000f350005b5b60006000fd",
  "source": "from vyper.interfaces import ERC20\n\ncontract PoolToken:\n  def totalSupply() -> uint256: constant\n  def balanceOf(_owner: address) -> uint256: constant\n  def setup(_initial_supply: uint256): modifying\n  def transfer(_to: address, _value:uint256) -> bool: modifying\n  def burn(_from: address, _value: uint256) -> bool: modifying\n\n### Basic information\n# Buyer and issuer of the option\nissuer: public(address)\nbuyer: public(address)\n# Address of the base (that you pay), asset (being bought)\nbase_addr: public(address)\nasset_addr: public(address)\n\n### Financial information\n# Fee\nfee: public(uint256)\n# Strike price [i.e. (strike_price_quote * base_volume) / strike_price_base  = asset_volume]\nstrike_price_base: public(uint256)\nstrike_price_quote: public(uint256)\nvolume: public(uint256)\n# Option can be exercised between maturity_time and expiry_time\nmaturity_time: public(timestamp)\nexpiry_time: public(timestamp)\n\n### External contracts\n# Callable base and asset ERC20s\nbase: ERC20\nasset: ERC20\n\n### Tokenizable Option variables\n# Pool token template\ntoken_template: public(address)\n\n# Address of the pool tokens\noption_claim_addr: public(address)\ncollateral_claim_addr: public(address)\n\n# Number of option/collateral claims outstanding\noption_claim_supply: public(uint256)\ncollateral_claim_supply: public(uint256)\n\n# Tokens representing a claim on options and collateral, respectively\noption_claim: PoolToken\ncollateral_claim: PoolToken\n\n### Contract states\nstate: public(uint256)\nSTATE_UNINITIALIZED: constant(uint256) = 0\nSTATE_INITIALIZED: constant(uint256) = 1\nSTATE_COLLATERALIZED: constant(uint256) = 2\nSTATE_ACTIVE: constant(uint256) = 3\nSTATE_EXERCISED: constant(uint256) = 4\nSTATE_EXPIRED: constant(uint256) = 5\n\n@public\ndef setup(_issuer: address, _buyer: address,\n          _base_addr: address, _asset_addr: address,\n          _fee: uint256, _strike_price_base: uint256, _strike_price_quote: uint256,\n          _volume: uint256,\n          _maturity_time: timestamp, _expiry_time: timestamp,\n          _token_template: address):\n    assert (self.state == STATE_UNINITIALIZED)\n    assert (_base_addr != _asset_addr)\n    assert (_expiry_time > block.timestamp) and (_expiry_time > _maturity_time)\n\n    # Standard Option Variables\n    self.issuer = _issuer\n    self.buyer = _buyer\n    self.base_addr = _base_addr\n    self.asset_addr = _asset_addr\n    self.fee = _fee\n    self.strike_price_base = _strike_price_base\n    self.strike_price_quote = _strike_price_quote\n    self.volume = _volume\n    self.maturity_time = _maturity_time\n    self.expiry_time = _expiry_time\n\n    self.base = ERC20(_base_addr)\n    self.asset = ERC20(_asset_addr)\n\n    # Tokenizable Option Variables\n    self.token_template = _token_template\n    self.option_claim_supply = (_volume * _strike_price_base) / _strike_price_quote\n    self.collateral_claim_supply = _volume\n    self.option_claim_addr = create_forwarder_to(_token_template)\n    self.option_claim = PoolToken(self.option_claim_addr)\n    self.option_claim.setup(self.option_claim_supply)\n    self.collateral_claim_addr = create_forwarder_to(_token_template)\n    self.collateral_claim = PoolToken(self.collateral_claim_addr)\n    self.collateral_claim.setup(self.collateral_claim_supply)\n\n    # Update State\n    self.state = STATE_INITIALIZED\n\n## Collateralizes option\n@public\ndef collateralize():\n    assert (msg.sender == self.issuer)\n    assert (self.state == STATE_INITIALIZED)\n    assert (self.expiry_time > block.timestamp)\n\n    asset_transfer: bool = self.asset.transferFrom(self.issuer, self, self.volume)\n    assert asset_transfer\n    collateral_claim_transfer: bool = self.collateral_claim.transfer(self.issuer, self.volume)\n    assert collateral_claim_transfer\n\n    self.state = STATE_COLLATERALIZED\n\n## Pays fee to issuer\n@public\ndef pay_fee():\n    assert (msg.sender == self.buyer)\n    assert (self.state == STATE_COLLATERALIZED)\n    assert (self.expiry_time > block.timestamp)\n\n    base_transfer: bool = self.base.transferFrom(self.buyer, self.issuer, self.fee)\n    assert base_transfer\n    option_claim_transfer: bool = self.option_claim.transfer(self.buyer, self.option_claim_supply)\n    assert option_claim_transfer\n\n    self.state = STATE_ACTIVE\n\n## Exercises the option and refunds the issuer for unused volume.\n# Internal function for core logic\n@private\ndef exercise_internal(exerciser: address, base_volume_exercised: uint256, asset_volume_exercised: uint256):\n    assert (self.expiry_time > block.timestamp) and (self.maturity_time <= block.timestamp)\n    assert (self.state == STATE_ACTIVE) or (self.state == STATE_EXERCISED)\n    assert (base_volume_exercised > 0)\n    assert (asset_volume_exercised > 0) and (asset_volume_exercised <= self.volume)\n\n    base_transfer: bool = self.base.transferFrom(exerciser, self, base_volume_exercised)\n    assert base_transfer\n    option_claim_burn: bool = self.option_claim.burn(exerciser, base_volume_exercised)\n    assert option_claim_burn\n    asset_transfer: bool = self.asset.transfer(self.buyer, asset_volume_exercised)\n    assert asset_transfer\n\n    self.option_claim_supply = self.option_claim.totalSupply()\n    self.volume = self.volume - asset_volume_exercised\n\n    self.state = STATE_EXERCISED\n\n## Exercise wrappers: can only be called by buyer.\n# Specify how many to buy\n@public\ndef exercise_from_asset(asset_volume_exercised: uint256):\n    base_volume_exercised: uint256 = (asset_volume_exercised * self.strike_price_base) / self.strike_price_quote\n\n    self.exercise_internal(msg.sender, base_volume_exercised, asset_volume_exercised)\n\n\n# Specify how many to sell\n@public\ndef exercise_from_base(base_volume_exercised: uint256):\n    assert (msg.sender == self.buyer)\n\n    asset_volume_exercised: uint256 = (base_volume_exercised * self.strike_price_quote) / self.strike_price_base\n\n    self.exercise_internal(msg.sender, base_volume_exercised, asset_volume_exercised)\n\n## Marks option as expired and refunds issuer.\n# Can call either before activation (to abort) or after expiry time\n@public\ndef expire():\n    assert (self.expiry_time <= block.timestamp) or (self.state == STATE_COLLATERALIZED)\n    assert (self.state != STATE_EXPIRED)\n\n    sender_collateral_claim_balance: uint256 = self.collateral_claim.balanceOf(msg.sender)\n    asset_claimed: uint256 = (sender_collateral_claim_balance * self.volume) / self.collateral_claim_supply\n    my_base_balance: uint256 = self.base.balanceOf(self)\n    base_claimed: uint256 = (sender_collateral_claim_balance * my_base_balance) / self.collateral_claim_supply\n\n    collateral_claim_burn: bool = self.collateral_claim.burn(msg.sender, sender_collateral_claim_balance)\n    assert collateral_claim_burn\n    base_transfer: bool = self.base.transfer(msg.sender, base_claimed)\n    assert base_transfer\n    asset_transfer: bool = self.asset.transfer(msg.sender, asset_claimed)\n    assert asset_transfer\n\n    self.state = STATE_EXPIRED\n\n# Returns all information about the contract in one go\n@public\n@constant\ndef get_info() -> (address, address, address, address,\n                    uint256, uint256, uint256,\n                    uint256, timestamp, timestamp,\n                    address, address, address,\n                    uint256, uint256,\n                    uint256):\n    return (self.issuer, self.buyer, self.base_addr, self.asset_addr,\n            self.fee, self.strike_price_base, self.strike_price_quote,\n            self.volume, self.maturity_time, self.expiry_time,\n            self.token_template, self.option_claim_addr, self.collateral_claim_addr,\n            self.option_claim_supply, self.collateral_claim_supply,\n            self.state)\n",
  "sourcePath": "/Users/Karim/Desktop/atomicoptions/contracts/v0-2/tokenized_option.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b12+commit.32ce6c9"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-10-14T01:22:36.304Z"
}