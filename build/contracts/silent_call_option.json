{
  "contractName": "silent_call_option",
  "abi": [
    {
      "name": "setup",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_issuer"
        },
        {
          "type": "address",
          "name": "_buyer"
        },
        {
          "type": "address",
          "name": "_base_addr"
        },
        {
          "type": "address",
          "name": "_asset_addr"
        },
        {
          "type": "uint256",
          "name": "_fee"
        },
        {
          "type": "bytes32",
          "name": "_strike_price_base_hash"
        },
        {
          "type": "bytes32",
          "name": "_strike_price_quote_hash"
        },
        {
          "type": "uint256",
          "name": "_volume"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "_maturity_time"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "_expiry_time"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 456081
    },
    {
      "name": "check_collateralization",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 41343
    },
    {
      "name": "relay_fee",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 44145
    },
    {
      "name": "exercise",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "strike_price_base"
        },
        {
          "type": "uint256",
          "name": "strike_price_quote"
        },
        {
          "type": "bytes32",
          "name": "salt"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 80923
    },
    {
      "name": "expire",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 41051
    },
    {
      "name": "withdraw_excess_base",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 5187
    },
    {
      "name": "withdraw_excess_asset",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 5766
    },
    {
      "name": "issuer",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 761
    },
    {
      "name": "buyer",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 791
    },
    {
      "name": "base_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 821
    },
    {
      "name": "asset_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 851
    },
    {
      "name": "fee",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 881
    },
    {
      "name": "strike_price_base_hash",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 911
    },
    {
      "name": "strike_price_quote_hash",
      "outputs": [
        {
          "type": "bytes32",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 941
    },
    {
      "name": "volume",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 971
    },
    {
      "name": "maturity_time",
      "outputs": [
        {
          "type": "uint256",
          "unit": "sec",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1001
    },
    {
      "name": "expiry_time",
      "outputs": [
        {
          "type": "uint256",
          "unit": "sec",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1031
    },
    {
      "name": "state",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1061
    }
  ],
  "bytecode": "0x610b0056600436101561000d57610af6565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526372d247e660005114156101895734156100ba57600080fd5b60043560205181106100cb57600080fd5b5060243560205181106100dd57600080fd5b5060443560205181106100ef57600080fd5b50606435602051811061010157600080fd5b50600a541561010f57600080fd5b6064356044351861011f57600080fd5b6101043561012435114261012435111661013857600080fd5b60043560005560243560015560443560025560643560035560843560045560a43560055560c43560065560e4356007556101043560085561012435600955604435600b55606435600c556001600a55005b633c48206e600051141561029c5734156101a257600080fd5b6001600a54146101b157600080fd5b42600954116101bf57600080fd5b600c543b6101cc57600080fd5b600c5430186101da57600080fd5b60206101e060246370a0823161016052306101805261017c600c545afa61020057600080fd5b6000506101e0516101405260075461014051101561021d57600080fd5b60075461014051111561029457600c543b61023757600080fd5b600c54301861024557600080fd5b60206102a0604463a9059cbb610200526000546102205260075461014051101561026e57600080fd5b60075461014051036102405261021c6000600c545af161028d57600080fd5b6000506102a05b506002600a55005b637fd8f6db60005114156104025734156102b557600080fd5b6002600a54146102c457600080fd5b42600954116102d257600080fd5b600b543b6102df57600080fd5b600b5430186102ed57600080fd5b60206101e060246370a0823161016052306101805261017c600b545afa61031357600080fd5b6000506101e0516101405260045461014051101561033057600080fd5b600b543b61033d57600080fd5b600b54301861034b57600080fd5b60206102a0604463a9059cbb61020052600054610220526004546102405261021c6000600b545af161037c57600080fd5b6000506102a0506004546101405111156103fa57600b543b61039d57600080fd5b600b5430186103ab57600080fd5b6020610360604463a9059cbb6102c0526001546102e0526004546101405110156103d457600080fd5b6004546101405103610300526102dc6000600b545af16103f357600080fd5b6000506103605b506003600a55005b632be261a6600051141561067257341561041b57600080fd5b600154331461042957600080fd5b42600854111542600954111661043e57600080fd5b6004600a54146003600a54141761045457600080fd5b60043561014052602435610160526000610140516020826101a00101526020810190506044356020826101a0010152602081019050806101a0526101a0905080516020820120905061018052600061016051602082610240010152602081019050604435602082610240010152602081019050806102405261024090508051602082012090506102205260055461018051146104ef57600080fd5b600654610220511461050057600080fd5b600b543b61050d57600080fd5b600b54301861051b57600080fd5b602061036060246370a082316102e05230610300526102fc600b545afa61054157600080fd5b600050610360516102c05260243561055857600080fd5b6024356102c051151561056c57600061058f565b6004356102c0516004356102c05102041461058657600080fd5b6004356102c051025b04610380526007546103805111156105a657600080fd5b600b543b6105b357600080fd5b600b5430186105c157600080fd5b6020610440604463a9059cbb6103a0526000546103c0526102c0516103e0526103bc6000600b545af16105f357600080fd5b60005061044050600c543b61060757600080fd5b600c54301861061557600080fd5b6020610500604463a9059cbb6104605260015461048052610380516104a05261047c6000600c545af161064757600080fd5b6000506105005061038051600754101561066057600080fd5b61038051600754036007556004600a55005b6379599f96600051141561076b57341561068b57600080fd5b600054331460015433141761069f57600080fd5b6002600a5414426009541115176106b557600080fd5b6005600a54186106c457600080fd5b600c543b6106d157600080fd5b600c5430186106df57600080fd5b60206101e060246370a0823161016052306101805261017c600c545afa61070557600080fd5b6000506101e05161014052600c543b61071d57600080fd5b600c54301861072b57600080fd5b60206102a0604463a9059cbb6102005260005461022052610140516102405261021c6000600c545af161075d57600080fd5b6000506102a0506005600a55005b63115ed8c4600051141561084d57341561078457600080fd5b600154331461079257600080fd5b600b543b61079f57600080fd5b600b5430186107ad57600080fd5b60206101e060246370a0823161016052306101805261017c600b545afa6107d357600080fd5b6000506101e0516101405260006004351015600435610140511015166107f857600080fd5b600c543b61080557600080fd5b600c54301861081357600080fd5b60206102a0604463a9059cbb61020052600154610220526004356102405261021c6000600c545af161084457600080fd5b6000506102a050005b63535dd9a0600051141561094857341561086657600080fd5b600054331461087457600080fd5b600c543b61088157600080fd5b600c54301861088f57600080fd5b60206101e060246370a0823161016052306101805261017c600c545afa6108b557600080fd5b6000506101e05161014052600060043510156004356007546004350110156108dc57600080fd5b60075460043501610140511015166108f357600080fd5b600c543b61090057600080fd5b600c54301861090e57600080fd5b60206102a0604463a9059cbb61020052600054610220526004356102405261021c6000600c545af161093f57600080fd5b6000506102a050005b631d143848600051141561096f57341561096157600080fd5b60005460005260206000f350005b637150d8ae600051141561099657341561098857600080fd5b60015460005260206000f350005b63a77f559960005114156109bd5734156109af57600080fd5b60025460005260206000f350005b635f72718960005114156109e45734156109d657600080fd5b60035460005260206000f350005b63ddca3f436000511415610a0b5734156109fd57600080fd5b60045460005260206000f350005b631be0fadd6000511415610a32573415610a2457600080fd5b60055460005260206000f350005b635b508edf6000511415610a59573415610a4b57600080fd5b60065460005260206000f350005b63c618a1e46000511415610a80573415610a7257600080fd5b60075460005260206000f350005b63879a031a6000511415610aa7573415610a9957600080fd5b60085460005260206000f350005b63fe3f3b816000511415610ace573415610ac057600080fd5b60095460005260206000f350005b63c19d93fb6000511415610af5573415610ae757600080fd5b600a5460005260206000f350005b5b60006000fd5b610004610b0003610004600039610004610b00036000f3",
  "deployedBytecode": "0x600436101561000d57610af6565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526372d247e660005114156101895734156100ba57600080fd5b60043560205181106100cb57600080fd5b5060243560205181106100dd57600080fd5b5060443560205181106100ef57600080fd5b50606435602051811061010157600080fd5b50600a541561010f57600080fd5b6064356044351861011f57600080fd5b6101043561012435114261012435111661013857600080fd5b60043560005560243560015560443560025560643560035560843560045560a43560055560c43560065560e4356007556101043560085561012435600955604435600b55606435600c556001600a55005b633c48206e600051141561029c5734156101a257600080fd5b6001600a54146101b157600080fd5b42600954116101bf57600080fd5b600c543b6101cc57600080fd5b600c5430186101da57600080fd5b60206101e060246370a0823161016052306101805261017c600c545afa61020057600080fd5b6000506101e0516101405260075461014051101561021d57600080fd5b60075461014051111561029457600c543b61023757600080fd5b600c54301861024557600080fd5b60206102a0604463a9059cbb610200526000546102205260075461014051101561026e57600080fd5b60075461014051036102405261021c6000600c545af161028d57600080fd5b6000506102a05b506002600a55005b637fd8f6db60005114156104025734156102b557600080fd5b6002600a54146102c457600080fd5b42600954116102d257600080fd5b600b543b6102df57600080fd5b600b5430186102ed57600080fd5b60206101e060246370a0823161016052306101805261017c600b545afa61031357600080fd5b6000506101e0516101405260045461014051101561033057600080fd5b600b543b61033d57600080fd5b600b54301861034b57600080fd5b60206102a0604463a9059cbb61020052600054610220526004546102405261021c6000600b545af161037c57600080fd5b6000506102a0506004546101405111156103fa57600b543b61039d57600080fd5b600b5430186103ab57600080fd5b6020610360604463a9059cbb6102c0526001546102e0526004546101405110156103d457600080fd5b6004546101405103610300526102dc6000600b545af16103f357600080fd5b6000506103605b506003600a55005b632be261a6600051141561067257341561041b57600080fd5b600154331461042957600080fd5b42600854111542600954111661043e57600080fd5b6004600a54146003600a54141761045457600080fd5b60043561014052602435610160526000610140516020826101a00101526020810190506044356020826101a0010152602081019050806101a0526101a0905080516020820120905061018052600061016051602082610240010152602081019050604435602082610240010152602081019050806102405261024090508051602082012090506102205260055461018051146104ef57600080fd5b600654610220511461050057600080fd5b600b543b61050d57600080fd5b600b54301861051b57600080fd5b602061036060246370a082316102e05230610300526102fc600b545afa61054157600080fd5b600050610360516102c05260243561055857600080fd5b6024356102c051151561056c57600061058f565b6004356102c0516004356102c05102041461058657600080fd5b6004356102c051025b04610380526007546103805111156105a657600080fd5b600b543b6105b357600080fd5b600b5430186105c157600080fd5b6020610440604463a9059cbb6103a0526000546103c0526102c0516103e0526103bc6000600b545af16105f357600080fd5b60005061044050600c543b61060757600080fd5b600c54301861061557600080fd5b6020610500604463a9059cbb6104605260015461048052610380516104a05261047c6000600c545af161064757600080fd5b6000506105005061038051600754101561066057600080fd5b61038051600754036007556004600a55005b6379599f96600051141561076b57341561068b57600080fd5b600054331460015433141761069f57600080fd5b6002600a5414426009541115176106b557600080fd5b6005600a54186106c457600080fd5b600c543b6106d157600080fd5b600c5430186106df57600080fd5b60206101e060246370a0823161016052306101805261017c600c545afa61070557600080fd5b6000506101e05161014052600c543b61071d57600080fd5b600c54301861072b57600080fd5b60206102a0604463a9059cbb6102005260005461022052610140516102405261021c6000600c545af161075d57600080fd5b6000506102a0506005600a55005b63115ed8c4600051141561084d57341561078457600080fd5b600154331461079257600080fd5b600b543b61079f57600080fd5b600b5430186107ad57600080fd5b60206101e060246370a0823161016052306101805261017c600b545afa6107d357600080fd5b6000506101e0516101405260006004351015600435610140511015166107f857600080fd5b600c543b61080557600080fd5b600c54301861081357600080fd5b60206102a0604463a9059cbb61020052600154610220526004356102405261021c6000600c545af161084457600080fd5b6000506102a050005b63535dd9a0600051141561094857341561086657600080fd5b600054331461087457600080fd5b600c543b61088157600080fd5b600c54301861088f57600080fd5b60206101e060246370a0823161016052306101805261017c600c545afa6108b557600080fd5b6000506101e05161014052600060043510156004356007546004350110156108dc57600080fd5b60075460043501610140511015166108f357600080fd5b600c543b61090057600080fd5b600c54301861090e57600080fd5b60206102a0604463a9059cbb61020052600054610220526004356102405261021c6000600c545af161093f57600080fd5b6000506102a050005b631d143848600051141561096f57341561096157600080fd5b60005460005260206000f350005b637150d8ae600051141561099657341561098857600080fd5b60015460005260206000f350005b63a77f559960005114156109bd5734156109af57600080fd5b60025460005260206000f350005b635f72718960005114156109e45734156109d657600080fd5b60035460005260206000f350005b63ddca3f436000511415610a0b5734156109fd57600080fd5b60045460005260206000f350005b631be0fadd6000511415610a32573415610a2457600080fd5b60055460005260206000f350005b635b508edf6000511415610a59573415610a4b57600080fd5b60065460005260206000f350005b63c618a1e46000511415610a80573415610a7257600080fd5b60075460005260206000f350005b63879a031a6000511415610aa7573415610a9957600080fd5b60085460005260206000f350005b63fe3f3b816000511415610ace573415610ac057600080fd5b60095460005260206000f350005b63c19d93fb6000511415610af5573415610ae757600080fd5b600a5460005260206000f350005b5b60006000fd",
  "source": "from vyper.interfaces import ERC20\n\n## Basic information\n# Buyer and issuer of the option\nissuer: public(address)\nbuyer: public(address)\n# Address of the base (that you pay), asset (being bought)\nbase_addr: public(address)\nasset_addr: public(address)\n\n## Financial information\n# Fee\nfee: public(uint256)\n# Strike price [i.e. (strike_price_base * base_volume) / strike_price_quote = asset_volume]\nstrike_price_base_hash: public(bytes32)\nstrike_price_quote_hash: public(bytes32)\nvolume: public(uint256)\n# Option can be exercised between maturity_time and expiry_time\nmaturity_time: public(timestamp)\nexpiry_time: public(timestamp)\n\n## Contract states\nstate: public(uint256)\nSTATE_UNINITIALIZED: constant(uint256) = 0\nSTATE_INITIALIZED: constant(uint256) = 1\nSTATE_COLLATERALIZED: constant(uint256) = 2\nSTATE_ACTIVE: constant(uint256) = 3\nSTATE_EXERCISED: constant(uint256) = 4\nSTATE_EXPIRED: constant(uint256) = 5\n\n## External contracts\n# Callable base and asset ERC20s\nbase: ERC20\nasset: ERC20\n\n@public\ndef setup(_issuer: address, _buyer: address,\n          _base_addr: address, _asset_addr: address,\n          _fee: uint256, _strike_price_base_hash: bytes32, _strike_price_quote_hash: bytes32,\n          _volume: uint256,\n          _maturity_time: timestamp, _expiry_time: timestamp):\n    assert (self.state == STATE_UNINITIALIZED)\n    assert (_base_addr != _asset_addr)\n    assert (_expiry_time > block.timestamp) and (_expiry_time > _maturity_time)\n\n    self.issuer = _issuer\n    self.buyer = _buyer\n    self.base_addr = _base_addr\n    self.asset_addr = _asset_addr\n    self.fee = _fee\n    self.strike_price_base_hash = _strike_price_base_hash\n    self.strike_price_quote_hash = _strike_price_quote_hash\n    self.volume = _volume\n    self.maturity_time = _maturity_time\n    self.expiry_time = _expiry_time\n\n    self.base = ERC20(_base_addr)\n    self.asset = ERC20(_asset_addr)\n\n    self.state = STATE_INITIALIZED\n\n## Checks that option has been collateralized by issuer.\n@public\ndef check_collateralization():\n    assert (self.state == STATE_INITIALIZED)\n    assert (self.expiry_time > block.timestamp)\n    asset_balance: uint256 = self.asset.balanceOf(self)\n    assert (asset_balance >= self.volume)\n    if asset_balance > self.volume:\n        self.asset.transfer(self.issuer, asset_balance - self.volume)\n\n    self.state = STATE_COLLATERALIZED\n\n## Checks that fee has been paid, relays to issuer.\n@public\ndef relay_fee():\n    assert (self.state == STATE_COLLATERALIZED)\n    assert (self.expiry_time > block.timestamp)\n    base_balance: uint256 = self.base.balanceOf(self)\n    assert (base_balance >= self.fee)\n    self.base.transfer(self.issuer, self.fee)\n    if base_balance > self.fee:\n        self.base.transfer(self.buyer, base_balance - self.fee)\n\n    self.state = STATE_ACTIVE\n\n## Exercises the option and refunds the issuer for unused volume.\n# Can only be called by buyer.\n@public\ndef exercise(strike_price_base: uint256, strike_price_quote: uint256, salt: bytes32):\n    assert (msg.sender == self.buyer)\n    assert (self.expiry_time > block.timestamp) and (self.maturity_time <= block.timestamp)\n    assert (self.state == STATE_ACTIVE) or (self.state == STATE_EXERCISED)\n    strike_price_base_bytes: bytes32 = convert(strike_price_base, bytes32)\n    strike_price_quote_bytes: bytes32 = convert(strike_price_quote, bytes32)\n    strike_price_base_hash_claimed: bytes32 = keccak256(concat(strike_price_base_bytes, salt))\n    strike_price_quote_hash_claimed: bytes32 = keccak256(concat(strike_price_quote_bytes, salt))\n    assert (strike_price_base_hash_claimed == self.strike_price_base_hash)\n    assert (strike_price_quote_hash_claimed == self.strike_price_quote_hash)\n    base_balance: uint256 = self.base.balanceOf(self)\n    volume_exercised: uint256 = (base_balance * strike_price_base) / strike_price_quote\n    assert (volume_exercised <= self.volume)\n    self.base.transfer(self.issuer, base_balance)\n    self.asset.transfer(self.buyer, volume_exercised)\n\n    self.volume = self.volume - volume_exercised\n\n    self.state = STATE_EXERCISED\n\n## Marks option as expired and refunds issuer.\n# Can call either before activation (to abort) or after exipry time\n# Can only be called by issuer\n@public\ndef expire():\n    assert (msg.sender == self.buyer) or (msg.sender == self.issuer)\n    assert (self.expiry_time <= block.timestamp) or (self.state == STATE_COLLATERALIZED)\n    assert (self.state != STATE_EXPIRED)\n    asset_balance: uint256 = self.asset.balanceOf(self)\n    self.asset.transfer(self.issuer, asset_balance)\n\n    self.state = STATE_EXPIRED\n\n## Excess withdrawal functions\n# Allow buyer/issuer to withdraw excess base/asset\n\n# Can only be called by buyer\n@public\ndef withdraw_excess_base(amount: uint256):\n    assert (msg.sender == self.buyer)\n    base_balance: uint256 = self.base.balanceOf(self)\n    assert (base_balance >= amount) and (amount >= 0)\n    self.asset.transfer(self.buyer, amount)\n\n# Cam only be called by issuer\n@public\ndef withdraw_excess_asset(amount: uint256):\n    assert (msg.sender == self.issuer)\n    asset_balance: uint256 = self.asset.balanceOf(self)\n    assert (asset_balance >= amount + self.volume) and (amount >= 0)\n    self.asset.transfer(self.issuer, amount)\n",
  "sourcePath": "/Users/Karim/Desktop/atomicoptions/contracts/silent_call_option.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b12+commit.32ce6c9"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-09-30T22:06:14.868Z"
}